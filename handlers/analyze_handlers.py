from analyzer import analyzer
from tenderguru_api import TenderGuruAPI, get_tender_by_number
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from keyboards import analyze_keyboard, back_keyboard, main_menu_keyboard
from utils.validators import extract_tender_number_and_platform
from config import TENDERGURU_API_CODE
from navigation_utils import handle_navigation_buttons
from company_profile import build_company_profile

async def analyze_tender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, bot_instance=None):
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        return
    text = getattr(message, 'text', None)
    if not text:
        await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É.", reply_markup=None)
        return
    text = text.strip()
    tender_number, platform_code = extract_tender_number_and_platform(text)
    if not tender_number:
        await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=back_keyboard)
        return
    context.user_data['last_tender_number'] = tender_number
    context.user_data['last_platform_code'] = platform_code
    await message.reply_text("üîç –ò—â—É —Ç–µ–Ω–¥–µ—Ä –ø–æ –Ω–æ–º–µ—Ä—É...")
    try:
        tender_data = get_tender_by_number(tender_number, platform_code)
    except Exception as e:
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ TenderGuru API: {e}")
        return
    if not tender_data or 'error' in tender_data or not tender_data.get('results'):
        if platform_code:
            await message.reply_text(f"‚ùå –¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É –∏ –ø–ª–æ—â–∞–¥–∫–µ ({platform_code}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–Ω–¥–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º {tender_number}.")
        return
    context.user_data['last_tender_data'] = tender_data
    tender = tender_data['results'][0] if isinstance(tender_data['results'], list) else tender_data['results']
    name = tender.get('TorgiName') or tender.get('ContractName') or tender.get('name', '‚Äî')
    customer = tender.get('Customer', '‚Äî')
    price = tender.get('Price', '‚Äî')
    etp = tender.get('ETP', '‚Äî')
    end_time = tender.get('EndTime', '‚Äî')
    msg = f"üìÑ –¢–µ–Ω–¥–µ—Ä: {name}\nüè¢ –ó–∞–∫–∞–∑—á–∏–∫: {customer}\nüí∞ –ù–ú–¶–ö: {price} ‚ÇΩ\nüìÖ –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –¥–æ: {end_time}\nüìç –ü–ª–æ—â–∞–¥–∫–∞: {etp}"
    keyboard = [[
        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", callback_data="download_docs"),
        InlineKeyboardButton("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¢–ó", callback_data="analyze_tz")
    ],[
        InlineKeyboardButton("ü¶æ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data="check_customer"),
        InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ö–æ–∂–∏—Ö", callback_data="similar_history")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text(msg, reply_markup=reply_markup)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if bot_instance:
        if handle_navigation_buttons(update, main_menu_keyboard, bot_instance):
            return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ '–ù–∞–∑–∞–¥' –∏ '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    # ... —É–¥–∞–ª–µ–Ω–æ ... 

async def handle_tender_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    tender_number = context.user_data.get('last_tender_number')
    tender_data = context.user_data.get('last_tender_data')
    if not tender_number or not tender_data:
        await query.answer()
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
        return
    tender = tender_data['results'][0] if isinstance(tender_data['results'], list) else tender_data['results']
    if data == "download_docs":
        await query.answer()
        docs_link = tender.get('TorgLink') or tender.get('docs_link') if tender else None
        if docs_link:
            await query.edit_message_text(f"üì• –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: [–°–∫–∞—á–∞—Ç—å]({docs_link})", parse_mode="Markdown")
        else:
            await query.edit_message_text("‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif data == "analyze_tz":
        await query.answer()
        if tender:
            try:
                if hasattr(analyzer, 'analyze_tender_text'):
                    analysis = await analyzer.analyze_tender_text(tender.get('TorgiName', '') + '\n' + (tender.get('Info', '') or ''))
                else:
                    analysis = "(–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)"
            except Exception as e:
                analysis = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
            await query.edit_message_text(f"üß† –ê–Ω–∞–ª–∏–∑ –¢–ó:\n{analysis}")
        else:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¢–ó.")
    elif data == "check_customer":
        await query.answer()
        if tender:
            customer = tender.get('Customer', '‚Äî')
            customer_inn = tender.get('CustomerInn', '‚Äî')
            try:
                profile = await build_company_profile(customer_inn)
            except Exception as e:
                profile = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}"
            await query.edit_message_text(f"ü¶æ –ó–∞–∫–∞–∑—á–∏–∫: {customer}\n–ò–ù–ù: {customer_inn}\n–ü—Ä–æ—Ñ–∏–ª—å:\n{profile}")
        else:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑—á–∏–∫–µ.")
    elif data == "similar_history":
        await query.answer()
        if tender:
            try:
                api = TenderGuruAPI(TENDERGURU_API_CODE)
                kwords = tender.get('TorgiName') or tender.get('ContractName') or ''
                similar = api.get_tenders_by_keywords(kwords)
                tenders = similar.get('results', [])
                msg = '\n'.join([f"‚Ä¢ {t.get('TorgiName', t.get('ContractName', '‚Äî'))} | {t.get('Price', '‚Äî')} ‚ÇΩ | {t.get('EndTime', '‚Äî')}" for t in tenders[:5]])
            except Exception as e:
                msg = f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö: {e}"
            await query.edit_message_text(f"üìä –ü–æ—Ö–æ–∂–∏–µ —Ç–µ–Ω–¥–µ—Ä—ã:\n{msg if msg else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ.'}")
        else:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö.")
    else:
        await query.answer()
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
# –í setup_handlers –∏–ª–∏ bot.py –¥–æ–±–∞–≤–∏—Ç—å:
# application.add_handler(CallbackQueryHandler(handle_tender_card_callback, pattern="^(download_docs|analyze_tz|check_customer|similar_history)$")) 