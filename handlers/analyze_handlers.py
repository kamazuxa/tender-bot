from analyzer import analyzer
from tenderguru_api import TenderGuruAPI, get_tender_by_number
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from keyboards import analyze_keyboard, back_keyboard, main_menu_keyboard
from utils.validators import extract_tender_info_from_url
from config import TENDERGURU_API_CODE
from navigation_utils import handle_navigation_buttons
from company_profile import build_company_profile
import logging

logger = logging.getLogger(__name__)

async def analyze_tender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, bot_instance=None):
    logger.info(f"[analyze_tender_handler] –í—ã–∑–≤–∞–Ω —Å update={update}, context.user_data={context.user_data}")
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        logger.warning("[analyze_tender_handler] –ù–µ—Ç message –≤ update")
        return
    text = getattr(message, 'text', None)
    if not text:
        await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É.", reply_markup=None)
        logger.warning("[analyze_tender_handler] –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ message")
        return
    text = text.strip()
    tender_info = extract_tender_info_from_url(text)
    tender_number = tender_info['reg_number'] if tender_info and 'reg_number' in tender_info else None
    platform_code = tender_info['source'] if tender_info and 'source' in tender_info else None
    logger.info(f"[analyze_tender_handler] tender_info={tender_info}, tender_number={tender_number}, platform_code={platform_code}")
    if not tender_number:
        error_msg = """‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å—Å—ã–ª–∫–∏.**

üí° **–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:**

üè¶ **–°–±–µ—Ä–±–∞–Ω–∫-–ê–°–¢:**
`https://www.sberbank-ast.ru/purchaseList/procedureView.html?PurchaseId=123456789`

üèõÔ∏è **–†–æ—Å—ç–ª—Ç–æ—Ä–≥:**
`https://www.roseltorg.ru/procedure/notice/view?noticeId=987654321`

üíº **B2B-Center:**
`https://www.b2b-center.ru/tender/5555555`

üìä **–†–¢–°-—Ç–µ–Ω–¥–µ—Ä:**
`https://www.rts-tender.ru/tender/4444444`

üá∑üá∫ **–ì–æ—Å–∑–∞–∫—É–ø–∫–∏:**
`https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber=0123456789012345678`

üîß **–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞:** `123456789`"""
        await message.reply_text(error_msg, parse_mode="Markdown", reply_markup=back_keyboard)
        logger.warning(f"[analyze_tender_handler] tender_number –Ω–µ –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞: {text}")
        return
    context.user_data['last_tender_number'] = tender_number
    context.user_data['last_platform_code'] = platform_code
    logger.info(f"[analyze_tender_handler] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.user_data: last_tender_number={tender_number}, last_platform_code={platform_code}")
    await message.reply_text("üîç –ò—â—É —Ç–µ–Ω–¥–µ—Ä –ø–æ –Ω–æ–º–µ—Ä—É...")
    try:
        tender_data = get_tender_by_number(tender_number, platform_code)
        logger.info(f"[analyze_tender_handler] get_tender_by_number({tender_number}, {platform_code}) –≤–µ—Ä–Ω—É–ª: {tender_data}")
    except Exception as e:
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ TenderGuru API: {e}")
        logger.error(f"[analyze_tender_handler] –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ TenderGuru API: {e}")
        return
    if not tender_data or 'error' in tender_data or not tender_data.get('results'):
        if platform_code:
            await message.reply_text(f"‚ùå –¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É –∏ –ø–ª–æ—â–∞–¥–∫–µ ({platform_code}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–Ω–¥–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º {tender_number}.")
        logger.warning(f"[analyze_tender_handler] TenderGuru –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–Ω–¥–µ—Ä: {tender_number}, {platform_code}")
        return
    context.user_data['last_tender_data'] = tender_data
    logger.info(f"[analyze_tender_handler] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.user_data: last_tender_data={tender_data}")
    tender = tender_data['results'][0] if isinstance(tender_data['results'], list) else tender_data['results']
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞
    name = tender.get('TorgiName') or tender.get('ContractName') or tender.get('name', '‚Äî')
    customer = tender.get('Customer', '‚Äî')
    price = tender.get('Price', '‚Äî')
    etp = tender.get('ETP', '‚Äî')
    end_time = tender.get('EndTime', '‚Äî')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    source_labels = {
        'sberbank-ast': 'üè¶ –°–±–µ—Ä–±–∞–Ω–∫-–ê–°–¢',
        'roseltorg': 'üèõÔ∏è –†–æ—Å—ç–ª—Ç–æ—Ä–≥',
        'b2b-center': 'üíº B2B-Center',
        'etp-ets': '‚ö° ETP-ETS',
        'gazneftetrade': '‚õΩ –ì–∞–∑–ù–µ—Ñ—Ç–µ–¢—Ä–µ–π–¥',
        'zakupki.gov.ru': 'üá∑üá∫ –ì–æ—Å–∑–∞–∫—É–ø–∫–∏',
        'rts-tender': 'üìä –†–¢–°-—Ç–µ–Ω–¥–µ—Ä',
        'fabrikant': 'üè≠ –§–∞–±—Ä–∏–∫–∞–Ω—Ç',
        'tektorg': 'üîß –¢–µ–∫—Ç–æ—Ä–≥'
    }
    source_label = source_labels.get(platform_code, f'üìç {etp}')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
    if isinstance(price, (int, float)) and price > 0:
        formatted_price = f"{price:,.0f} ‚ÇΩ"
    else:
        formatted_price = str(price)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    if end_time and end_time != '‚Äî':
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
            from datetime import datetime
            if isinstance(end_time, str):
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–∞—Ä—Å–∏–º
                clean_date = end_time.split('T')[0] if 'T' in end_time else end_time
                parsed_date = datetime.strptime(clean_date, '%Y-%m-%d')
                formatted_date = parsed_date.strftime('%d.%m.%Y')
            else:
                formatted_date = str(end_time)
        except:
            formatted_date = str(end_time)
    else:
        formatted_date = '‚Äî'
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = f"""üìÑ **–¢–µ–Ω–¥–µ—Ä –Ω–∞–π–¥—ë–Ω!**

üè∑Ô∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}
üè¢ **–ó–∞–∫–∞–∑—á–∏–∫:** {customer}
üí∞ **–ù–ú–¶–ö:** {formatted_price}
üìÖ **–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –¥–æ:** {formatted_date}
{source_label}

üîç **–ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞:** `{tender_number}`"""
    
    keyboard = [[
        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", callback_data="download_docs"),
        InlineKeyboardButton("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¢–ó", callback_data="analyze_tz")
    ],[
        InlineKeyboardButton("ü¶æ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data="check_customer"),
        InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ö–æ–∂–∏—Ö", callback_data="similar_history")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text(msg, parse_mode="Markdown", reply_markup=reply_markup)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if bot_instance:
        if handle_navigation_buttons(update, main_menu_keyboard, bot_instance):
            return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ '–ù–∞–∑–∞–¥' –∏ '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    # ... —É–¥–∞–ª–µ–Ω–æ ... 

async def handle_tender_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    data = query.data if query else None
    logger = logging.getLogger(__name__)
    logger.info(f"[handle_tender_card_callback] –ü–æ–ª—É—á–µ–Ω callback: {data}, context.user_data={context.user_data}")
    tender_number = context.user_data.get('last_tender_number')
    tender_data = context.user_data.get('last_tender_data')
    if not tender_number or not tender_data or not tender_data.get('results'):
        await query.answer()
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
        logger.warning(f"[handle_tender_card_callback] –ù–µ—Ç tender_number –∏–ª–∏ tender_data: {tender_number}, {tender_data}")
        return
    results = tender_data.get('results')
    tender = results[0] if isinstance(results, list) and results else results if results else None
    if not tender:
        await query.answer()
        await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–Ω–¥–µ—Ä—É.")
        logger.warning(f"[handle_tender_card_callback] tender –ø—É—Å—Ç–æ–π")
        return
    if isinstance(tender, dict):
        get = tender.get
    else:
        def get(key, default=None):
            return default
    if data == "download_docs":
        logger.info(f"[handle_tender_card_callback] –ö–Ω–æ–ø–∫–∞: download_docs, tender={tender}")
        await query.answer()
        docs_link = get('TorgLink') or get('docs_link')
        if docs_link:
            await query.edit_message_text(f"üì• –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: [–°–∫–∞—á–∞—Ç—å]({docs_link})", parse_mode="Markdown")
        else:
            await query.edit_message_text("‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif data == "analyze_tz":
        logger.info(f"[handle_tender_card_callback] –ö–Ω–æ–ø–∫–∞: analyze_tz, tender={tender}")
        await query.answer()
        try:
            analyze_func = getattr(analyzer, 'analyze_tender_text', None)
            if analyze_func and callable(analyze_func):
                text = get('TorgiName', '') + '\n' + (get('Info', '') or '')
                analysis = analyze_func(text)
                if hasattr(analysis, '__await__'):
                    analysis = await analysis
            else:
                analysis = "(–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)"
        except Exception as e:
            analysis = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
        await query.edit_message_text(f"üß† –ê–Ω–∞–ª–∏–∑ –¢–ó:\n{analysis}")
    elif data == "check_customer":
        logger.info(f"[handle_tender_card_callback] –ö–Ω–æ–ø–∫–∞: check_customer, tender={tender}")
        await query.answer()
        customer = get('Customer', '‚Äî')
        customer_inn = get('CustomerInn', '‚Äî')
        try:
            profile = await build_company_profile(customer_inn)
        except Exception as e:
            profile = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}"
        await query.edit_message_text(f"ü¶æ –ó–∞–∫–∞–∑—á–∏–∫: {customer}\n–ò–ù–ù: {customer_inn}\n–ü—Ä–æ—Ñ–∏–ª—å:\n{profile}")
    elif data == "similar_history":
        logger.info(f"[handle_tender_card_callback] –ö–Ω–æ–ø–∫–∞: similar_history, tender={tender}")
        await query.answer()
        try:
            api = TenderGuruAPI(TENDERGURU_API_CODE)
            kwords = get('TorgiName') or get('ContractName') or ''
            similar = api.get_tenders_by_keywords(kwords)
            tenders = similar.get('results', [])
            msg = '\n'.join([f"‚Ä¢ {t.get('TorgiName', t.get('ContractName', '‚Äî'))} | {t.get('Price', '‚Äî')} ‚ÇΩ | {t.get('EndTime', '‚Äî')}" for t in tenders[:5] if isinstance(t, dict)])
        except Exception as e:
            msg = f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö: {e}"
        await query.edit_message_text(f"üìä –ü–æ—Ö–æ–∂–∏–µ —Ç–µ–Ω–¥–µ—Ä—ã:\n{msg if msg else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ.'}")
    else:
        logger.info(f"[handle_tender_card_callback] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")
        await query.answer()
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
# –í setup_handlers –∏–ª–∏ bot.py –¥–æ–±–∞–≤–∏—Ç—å:
# application.add_handler(CallbackQueryHandler(handle_tender_card_callback, pattern="^(download_docs|analyze_tz|check_customer|similar_history)$")) 