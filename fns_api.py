"""
API –§–ù–° –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ï–ì–†–Æ–õ/–ï–ì–†–ò–ü
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ API-–§–ù–°
"""

import httpx
import asyncio
import logging
from typing import Dict, List, Optional
from config import FNS_API_KEY

logger = logging.getLogger(__name__)

class FNSAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –§–ù–°"""
    
    def __init__(self):
        self.api_key = FNS_API_KEY
        self.base_url = "https://api-fns.ru/api"
        self.timeout = 30.0
        self.max_retries = 3
        self.retry_delay = 1.0
    
    async def _make_request(self, endpoint: str, params: Optional[Dict] = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –§–ù–° —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        
        for attempt in range(self.max_retries):
            try:
                async with httpx.AsyncClient(timeout=self.timeout) as client:
                    url = f"{self.base_url}/{endpoint}"
                    response = await client.get(url, params=params)
                    
                    logger.info(f"[fns] –ó–∞–ø—Ä–æ—Å –∫ {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
                    logger.info(f"[fns] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                    
                    if response.status_code == 200:
                        result = response.json()
                        logger.info(f"[fns] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                        return result
                    elif response.status_code == 404:
                        logger.warning(f"[fns] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {endpoint}: {params}")
                        return None
                    elif response.status_code == 403:
                        logger.error(f"[fns] –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403): {response.text}")
                        logger.error(f"[fns] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ IP-–∞–¥—Ä–µ—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ https://api-fns.ru")
                        return None
                    else:
                        logger.error(f"[fns] –û—à–∏–±–∫–∞ API {endpoint}: {response.status_code} - {response.text}")
                        
            except httpx.TimeoutException:
                logger.warning(f"[fns] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            except Exception as e:
                logger.error(f"[fns] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint}: {e}")
            
            if attempt < self.max_retries - 1:
                await asyncio.sleep(self.retry_delay * (attempt + 1))
        
        return None
    
    async def search_companies(self, query: str, page: int = 1) -> Dict:
        """
        –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
        –ú–µ—Ç–æ–¥: search
        """
        logger.info(f"[fns] –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π: {query}")
        
        params = {
            'q': query,
            'key': self.api_key
        }
        
        if page > 1:
            params['page'] = str(page)
        
        result = await self._make_request('search', params)
        
        if result:
            return {
                "query": query,
                "companies": result.get('items', []),
                "total_count": result.get('Count', 0),
                "status": "found"
            }
        
        return {
            "query": query,
            "companies": [],
            "total_count": 0,
            "status": "not_found"
        }
    
    async def get_company_info(self, inn_or_ogrn: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ï–ì–†–Æ–õ/–ï–ì–†–ò–ü
        –ú–µ—Ç–æ–¥: egr
        """
        logger.info(f"[fns] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: {inn_or_ogrn}")
        
        params = {
            'req': inn_or_ogrn,
            'key': self.api_key
        }
        
        result = await self._make_request('egr', params)
        logger.info(f"[fns] –†–µ–∑—É–ª—å—Ç–∞—Ç get_company_info –¥–ª—è {inn_or_ogrn}: {result}")
        
        if result and result.get('items'):
            return {
                "inn_or_ogrn": inn_or_ogrn,
                "data": result.get('items', []),
                "status": "found"
            }
        
        return {
            "inn_or_ogrn": inn_or_ogrn,
            "data": [],
            "status": "not_found"
        }
    
    async def check_company(self, inn_or_ogrn: str) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (–ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç–∏)
        –ú–µ—Ç–æ–¥: check
        """
        logger.info(f"[fns] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞: {inn_or_ogrn}")
        
        params = {
            'req': inn_or_ogrn,
            'key': self.api_key
        }
        
        result = await self._make_request('check', params)
        logger.info(f"[fns] –†–µ–∑—É–ª—å—Ç–∞—Ç check_company –¥–ª—è {inn_or_ogrn}: {result}")
        
        if result and result.get('items'):
            items = result.get('items', [])
            if items:
                item = items[0]
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–Æ–õ –∏–ª–∏ –ò–ü)
                if '–Æ–õ' in item:
                    company_data = item['–Æ–õ']
                    company_type = '–Æ–õ'
                elif '–ò–ü' in item:
                    company_data = item['–ò–ü']
                    company_type = '–ò–ü'
                else:
                    company_data = {}
                    company_type = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                positive = company_data.get('–ü–æ–∑–∏—Ç–∏–≤', {})
                negative = company_data.get('–ù–µ–≥–∞—Ç–∏–≤', {})
                
                return {
                    "inn_or_ogrn": inn_or_ogrn,
                    "company_type": company_type,
                    "has_violations": bool(negative),
                    "positive_factors": positive,
                    "negative_factors": negative,
                    "status": "found",
                    "raw_data": result
                }
        
        return {
            "inn_or_ogrn": inn_or_ogrn,
            "company_type": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "has_violations": False,
            "positive_factors": {},
            "negative_factors": {},
            "status": "not_found",
            "raw_data": None
        }
    
    async def get_company_changes(self, inn_or_ogrn: str, from_date: Optional[str] = None) -> Dict:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
        –ú–µ—Ç–æ–¥: changes
        """
        logger.info(f"[fns] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {inn_or_ogrn} —Å {from_date}")
        
        params = {
            'req': inn_or_ogrn,
            'key': self.api_key
        }
        
        if from_date:
            params['dat'] = from_date
        
        result = await self._make_request('changes', params)
        
        if result and result.get('items'):
            return {
                "inn_or_ogrn": inn_or_ogrn,
                "from_date": from_date,
                "changes": result.get('items', []),
                "status": "found"
            }
        
        return {
            "inn_or_ogrn": inn_or_ogrn,
            "from_date": from_date,
            "changes": [],
            "status": "not_found"
        }
    
    async def check_account_blocks(self, inn: str) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å—á–µ—Ç–∞
        –ú–µ—Ç–æ–¥: nalogbi
        """
        logger.info(f"[fns] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å—á–µ—Ç–∞: {inn}")
        
        params = {
            'inn': inn,
            'key': self.api_key
        }
        
        result = await self._make_request('nalogbi', params)
        
        if result and result.get('items'):
            return {
                "inn": inn,
                "blocks_data": result.get('items', []),
                "status": "found"
            }
        
        return {
            "inn": inn,
            "blocks_data": [],
            "status": "not_found"
        }
    
    def format_company_info(self, company_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        if not company_data or company_data.get('status') != 'found':
            return "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        items = company_data.get('data', [])
        if not items:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
        item = items[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if '–Æ–õ' in item:
            company = item['–Æ–õ']
            company_type = "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
        elif '–ò–ü' in item:
            company = item['–ò–ü']
            company_type = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å"
        elif '–ù–†' in item:
            company = item['–ù–†']
            company_type = "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"
        else:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = f"üè¢ **{company_type}**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if company_type == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ":
            info += f"**–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:** {company.get('–ù–∞–∏–º–°–æ–∫—Ä–Æ–õ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            info += f"**–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:** {company.get('–ù–∞–∏–º–ü–æ–ª–Ω–Æ–õ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        elif company_type == "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å":
            info += f"**–§–ò–û:** {company.get('–§–ò–û–ü–æ–ª–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        
        info += f"**–ò–ù–ù:** {company.get('–ò–ù–ù', company.get('–ò–ù–ù–§–õ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
        info += f"**–û–ì–†–ù:** {company.get('–û–ì–†–ù', company.get('–û–ì–†–ù–ò–ü', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
        info += f"**–°—Ç–∞—Ç—É—Å:** {company.get('–°—Ç–∞—Ç—É—Å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        info += f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {company.get('–î–∞—Ç–∞–†–µ–≥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        
        if company.get('–î–∞—Ç–∞–ü—Ä–µ–∫—Ä'):
            info += f"**–î–∞—Ç–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è:** {company.get('–î–∞—Ç–∞–ü—Ä–µ–∫—Ä')}\n"
        
        info += f"**–ê–¥—Ä–µ—Å:** {company.get('–ê–¥—Ä–µ—Å–ü–æ–ª–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        info += f"**–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** {company.get('–û—Å–Ω–í–∏–¥–î–µ—è—Ç', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if company.get('–ù–æ–º–¢–µ–ª'):
            info += f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {company.get('–ù–æ–º–¢–µ–ª')}\n"
        
        if company.get('E-mail'):
            info += f"**Email:** {company.get('E-mail')}\n"
        
        # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (–¥–ª—è –Æ–õ)
        if company_type == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ" and company.get('–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'):
            director = company['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å']
            info += f"**–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:** {director.get('–§–ò–û–ü–æ–ª–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            info += f"**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {director.get('–î–æ–ª–∂–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        
        # –£—á—Ä–µ–¥–∏—Ç–µ–ª–∏ (–¥–ª—è –Æ–õ)
        if company_type == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ" and company.get('–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏'):
            founders = company['–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏']
            info += f"**–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏:** {len(founders)} —á–µ–ª.\n"
            for i, founder in enumerate(founders[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3
                if '–£—á—Ä–§–õ' in founder:
                    founder_info = founder['–£—á—Ä–§–õ']
                    info += f"  {i}. {founder_info.get('–§–ò–û–ü–æ–ª–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} - {founder.get('–ü—Ä–æ—Ü–µ–Ω—Ç', '0')}%\n"
                elif '–£—á—Ä–Æ–õ' in founder:
                    founder_info = founder['–£—á—Ä–Æ–õ']
                    info += f"  {i}. {founder_info.get('–ù–∞–∏–º–°–æ–∫—Ä–Æ–õ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} - {founder.get('–ü—Ä–æ—Ü–µ–Ω—Ç', '0')}%\n"
        
        return info
    
    def format_company_check(self, check_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"""
        if not check_data or check_data.get('status') != 'found':
            return "‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        info = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞**\n\n"
        info += f"**–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:** {check_data.get('company_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        positive = check_data.get('positive_factors', {})
        negative = check_data.get('negative_factors', {})
        
        if positive:
            info += "\n‚úÖ **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**\n"
            if positive.get('–¢–µ–∫—Å—Ç'):
                info += f"‚Ä¢ {positive['–¢–µ–∫—Å—Ç']}\n"
            else:
                for key, value in positive.items():
                    if key != '–¢–µ–∫—Å—Ç':
                        info += f"‚Ä¢ {key}: {value}\n"
        
        if negative:
            info += "\n‚ùå **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**\n"
            if negative.get('–¢–µ–∫—Å—Ç'):
                info += f"‚Ä¢ {negative['–¢–µ–∫—Å—Ç']}\n"
            else:
                for key, value in negative.items():
                    if key != '–¢–µ–∫—Å—Ç':
                        info += f"‚Ä¢ {key}: {value}\n"
        
        if not positive and not negative:
            info += "\n‚úÖ **–ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ**\n"
        
        return info

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
fns_api = FNSAPI() 