import logging
logging.basicConfig(level=logging.INFO)
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler,
    CallbackQueryHandler, filters
)
from config import TELEGRAM_TOKEN, LOG_LEVEL, LOG_FILE, SERPAPI_KEY, OPENAI_API_KEY, OPENAI_MODEL
from damia import damia_client, extract_tender_number
from downloader import downloader
from analyzer import analyzer
import os
import re
import zipfile
import tempfile
from serpapi import GoogleSearch
import json
import openai
from urllib.parse import urlparse
import mimetypes
import functools
import time
from typing import Optional, Dict, Any, Callable
try:
    import httpx
except ImportError:
    httpx = None
try:
    from bs4 import BeautifulSoup
except ImportError:
    BeautifulSoup = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
ANALYSIS_CACHE = {}
CACHE_TTL = 3600  # 1 —á–∞—Å

# Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_RETRIES = 3
RETRY_DELAY = 1  # —Å–µ–∫—É–Ω–¥—ã

def retry_on_error(max_retries: int = MAX_RETRIES, delay: float = RETRY_DELAY):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry-–ª–æ–≥–∏–∫–∏"""
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            last_exception = None
            for attempt in range(max_retries):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    logger.warning(f"[retry] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(delay * (2 ** attempt))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            logger.error(f"[retry] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: {last_exception}")
            raise last_exception
        return wrapper
    return decorator

def get_cache_key(tender_data: Dict, files: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    import hashlib
    tender_str = json.dumps(tender_data, sort_keys=True)
    files_str = json.dumps([f.get('path', '') for f in files], sort_keys=True)
    return hashlib.md5((tender_str + files_str).encode()).hexdigest()

def get_cached_analysis(cache_key: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∫—ç—à–∞"""
    if cache_key in ANALYSIS_CACHE:
        timestamp, result = ANALYSIS_CACHE[cache_key]
        if time.time() - timestamp < CACHE_TTL:
            logger.info(f"[cache] –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {cache_key}")
            return result
        else:
            del ANALYSIS_CACHE[cache_key]
    return None

def cache_analysis_result(cache_key: str, result: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫—ç—à"""
    ANALYSIS_CACHE[cache_key] = (time.time(), result)
    logger.info(f"[cache] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {cache_key}")

def safe_get_message(update: Update) -> Optional[Any]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ update"""
    if update.message:
        return update.message
    elif update.callback_query and update.callback_query.message:
        return update.callback_query.message
    return None

def validate_user_session(user_id: int, user_sessions: Dict, required_status: str = None) -> tuple[bool, Optional[Dict]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        return False, None
    
    session = user_sessions[user_id]
    
    if required_status and session.get('status') != required_status:
        return False, session
    
    return True, session

async def handle_session_error(query, error_msg: str = "‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ."):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–µ—Å—Å–∏–∏"""
    try:
        await query.edit_message_text(error_msg)
    except Exception as e:
        logger.warning(f"[bot] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

EXCLUDE_DOMAINS = [
    "avito.ru", "wildberries.ru", "ozon.ru", "market.yandex.ru", "lavka.yandex.ru",
    "beru.ru", "goods.ru", "tmall.ru", "aliexpress.ru",
    "youtube.com", "youtu.be", "rutube.ru",
    "consultant.ru"
]
EXCLUDE_PATTERNS = ["gost", "wiki", "gos", ".edu", ".gov"]
EXCLUDE_MINUS_WORDS = ["–≥–æ—Å—Ç", "–≤–∏–∫–∏–ø–µ–¥–∏—è", "—Ç–µ—Ö—É—Å–ª–æ–≤–∏—è", "–Ω–æ—Ä–º–∞—Ç–∏–≤", "—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ"]
EXCLUDE_HTML = [
    'tender', 'zakupka', 'zakupki', '—Ç–µ–Ω–¥–µ—Ä', '–∑–∞–∫—É–ø–∫–∞', '–≤–∏–¥–µ–æ',
    *EXCLUDE_MINUS_WORDS
]

def is_good_domain(url):
    netloc = urlparse(url).netloc.lower()
    return not any(domain in netloc for domain in EXCLUDE_DOMAINS)

async def fetch_html(url):
    if not httpx or not BeautifulSoup:
        return None
    # PDF-—Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    if url.lower().endswith('.pdf'):
        return None
    # PDF-—Ñ–∏–ª—å—Ç—Ä –ø–æ mime-type
    mime, _ = mimetypes.guess_type(url)
    if mime and 'pdf' in mime:
        return None
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(url, follow_redirects=True)
            if resp.status_code == 200 and 'pdf' not in resp.headers.get('content-type', ''):
                soup = BeautifulSoup(resp.text, 'html.parser')
                # –í—ã—Ä–µ–∑–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –±–ª–æ–∫–∏
                for tag in soup(['header', 'footer', 'nav', 'aside']):
                    tag.decompose()
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ main, article, div.content –µ—Å–ª–∏ –µ—Å—Ç—å
                main = soup.find('main')
                article = soup.find('article')
                content_div = soup.find('div', class_='content')
                if main:
                    text = main.get_text(separator=' ', strip=True)
                elif article:
                    text = article.get_text(separator=' ', strip=True)
                elif content_div:
                    text = content_div.get_text(separator=' ', strip=True)
                else:
                    text = soup.get_text(separator=' ', strip=True)
                return text[:8000]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è GPT
    except Exception as e:
        logger.error(f"[bot] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
    return None

def format_price(price_raw):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤–∞–ª—é—Ç—É –Ω–∞ '—Ä—É–±–ª–µ–π'"""
    if isinstance(price_raw, str):
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–¥–µ–ª–∏—Ç—å —á–∏—Å–ª–æ –∏ –≤–∞–ª—é—Ç—É
        parts = price_raw.split()
        if parts and parts[0].replace('.', '', 1).isdigit():
            num = float(parts[0]) if '.' in parts[0] else int(parts[0])
            formatted = f"{num:,}".replace(",", " ")
            return f"{formatted} —Ä—É–±–ª–µ–π"
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return price_raw
    elif isinstance(price_raw, (int, float)):
        return f"{price_raw:,}".replace(",", " ") + " —Ä—É–±–ª–µ–π"
    return str(price_raw)

def format_date(date_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD –≤ DD.MM.YYYY"""
    try:
        parts = date_str.split('-')
        if len(parts) == 3:
            return f"{parts[2]}.{parts[1]}.{parts[0]}"
        return date_str
    except Exception:
        return date_str

def format_phone(phone_raw):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –≤–∏–¥ +74959941031"""
    digits = re.sub(r'\D', '', str(phone_raw))
    if digits.startswith('7') and len(digits) == 11:
        return f'+{digits}'
    return phone_raw

class TenderBot:
    def __init__(self):
        self.app = None
        self.user_sessions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TenderBot!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã –≤ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö.

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ (19 —Ü–∏—Ñ—Ä)
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä —Å —Å–∞–π—Ç–∞ –≥–æ—Å–∑–∞–∫—É–ø–æ–∫
3. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á—É –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã

**–ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/cleanup - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã:**
```
0123456789012345678
https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber=0123456789012345678
```

–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
            [InlineKeyboardButton("üîß –°—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown', reply_markup=reply_markup)
        logger.info(f"[bot] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é TenderBot**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–Ω–¥–µ—Ä–∞—Ö
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç–µ–Ω–¥–µ—Ä–∞ (—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ, —É—Å–ª–æ–≤–∏—è –∏ —Ç.–¥.)
‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI GPT
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ 19-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞
‚Ä¢ 20-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞  
‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ zakupki.gov.ru

**–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:**
‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–Ω–¥–µ—Ä–∞
‚Ä¢ –¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É–ø–∞–∫–æ–≤–∫–µ –∏ –∫–∞—á–µ—Å—Ç–≤—É
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—á–∞—Å—Ç–∏—é
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX, XLS, XLSX, TXT
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_text = f"""
üîß **–°—Ç–∞—Ç—É—Å TenderBot**

**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–í–µ—Ä—Å–∏—è:** 2.0.0
**–°—Ç–∞—Ç—É—Å:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

**API —Å—Ç–∞—Ç—É—Å:**
‚Ä¢ DaMIA API: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ OpenAI API: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {len(self.user_sessions)}
‚Ä¢ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(list(downloader.download_dir.glob('*')))}

**–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ
‚Ä¢ VPN –¥–ª—è OpenAI: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è
        """
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def cleanup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cleanup"""
        try:
            deleted_count = downloader.cleanup_old_files()
            await update.message.reply_text(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
        except Exception as e:
            logger.error(f"[bot] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        message_text = update.message.text.strip()
        
        logger.info(f"[bot] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message_text}...")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            try:
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            except Exception as e:
                logger.warning(f"[bot] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat_action: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ chat_action
        except Exception as e:
            logger.error(f"[bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ chat_action: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                'status': 'waiting_for_tender',
                'tender_data': None,
                'files': None,
                'search_queries': None
            }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if message_text.startswith('/'):
            if message_text == '/start':
                await self.start_command(update, context)
            elif message_text == '/help':
                await self.help_command(update, context)
            elif message_text == '/status':
                await self.status_command(update, context)
            elif message_text == '/cleanup':
                await self.cleanup_command(update, context)
            else:
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = self.user_sessions[user_id]
        
        if session['status'] == 'waiting_for_tender':
            # –û–∂–∏–¥–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞
            await update.message.reply_text("üîç –ò—â—É —Ç–µ–Ω–¥–µ—Ä...")
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞
                tender_number = extract_tender_number(message_text)
                if not tender_number:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞
                tender_info = await damia_client.get_tender_info(tender_number)
                if not tender_info:
                    await update.message.reply_text("‚ùå –¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                session['status'] = 'tender_found'
                session['tender_data'] = tender_info
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ
                await self._send_tender_info(update, tender_info, tender_number)
                
            except Exception as e:
                logger.error(f"[bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–Ω–¥–µ—Ä–∞: {e}")
                await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–Ω–¥–µ—Ä–∞: {str(e)}")
                
        elif session['status'] == 'tender_found':
            await update.message.reply_text("üìã –¢–µ–Ω–¥–µ—Ä —É–∂–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞.")
            
        elif session['status'] == 'ready_for_analysis':
            await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑ —É–∂–µ –≥–æ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞.")
            
        elif session['status'] == 'completed':
            await update.message.reply_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            
        else:
            await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    
    async def _send_tender_info(self, update: Update, tender_info: dict, reg_number: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ"""
        try:
            # --- –í–°–¢–ê–í–ö–ê: —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–Ω–¥–µ—Ä–∞ ---
            if tender_info and len(tender_info) == 1 and isinstance(list(tender_info.values())[0], dict):
                tender_info = list(tender_info.values())[0]
            # --- –ö–û–ù–ï–¶ –í–°–¢–ê–í–ö–ò ---
            
            logger.info(f"[bot] –û—Ç–≤–µ—Ç DaMIA: {tender_info}")
            
            if not tender_info:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–Ω–¥–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º {reg_number}.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
                
            formatted_data = damia_client.format_tender_info(tender_info)
            user_id = update.effective_user.id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_sessions:
                self.user_sessions[user_id]['tender_data'] = tender_info
                self.user_sessions[user_id]['formatted_info'] = formatted_data
                self.user_sessions[user_id]['status'] = 'ready_for_analysis'
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_info = f"""
üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ**

üìä **–°—Ç–∞—Ç—É—Å:** {formatted_data.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìã **–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω:** {formatted_data.get('federal_law', '–ù–µ —É–∫–∞–∑–∞–Ω')}-–§–ó
üè¢ **–ó–∞–∫–∞–∑—á–∏–∫:** {formatted_data.get('customer', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìù **–ò–ù–ù:** {formatted_data.get('customer_inn', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìç **–ê–¥—Ä–µ—Å:** {formatted_data.get('customer_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÑ **–ü—Ä–µ–¥–º–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏:** {formatted_data.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üí∞ **–¶–µ–Ω–∞:** {formatted_data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìÖ **–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {formatted_data.get('publication_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
‚è∞ **–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –¥–æ:** {formatted_data.get('submission_deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìç **–ú–µ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∫–∏:** {formatted_data.get('delivery_place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üèõÔ∏è **–≠–¢–ü:** {formatted_data.get('etp_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:** {formatted_data.get('contact_person', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} | {formatted_data.get('contact_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìß **Email:** {formatted_data.get('contact_email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="detailed_info")],
                [InlineKeyboardButton("üì¶ –¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", callback_data="products")],
                [InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="documents")],
                [InlineKeyboardButton("ü§ñ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="analyze")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —á–∞—Å—Ç–∏
            max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è Telegram
            if len(formatted_info) > max_length:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = []
                current_part = ""
                lines = formatted_info.split('\n')
                
                for line in lines:
                    if len(current_part) + len(line) + 1 > max_length:
                        if current_part:
                            parts.append(current_part.strip())
                        current_part = line
                    else:
                        current_part += '\n' + line if current_part else line
                
                if current_part:
                    parts.append(current_part.strip())
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await update.message.reply_text(
                    f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ** (—á–∞—Å—Ç—å 1 –∏–∑ {len(parts)}):\n\n{parts[0]}",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                for i, part in enumerate(parts[1:], 2):
                    await update.message.reply_text(
                        f"üìã **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏** (—á–∞—Å—Ç—å {i} –∏–∑ {len(parts)}):\n\n{part}",
                        parse_mode='Markdown'
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await update.message.reply_text(
                    f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ**\n\n{formatted_info}",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            
        except Exception as e:
            logger.error(f"[bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–Ω–¥–µ—Ä–µ: {e}")
            try:
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–Ω–¥–µ—Ä–µ: {str(e)}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            except Exception as send_error:
                logger.error(f"[bot] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
    
    async def _analyze_documents(self, tender_data, files, update=None, chat_id=None, bot=None):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = get_cache_key(tender_data, files)
        cached_result = get_cached_analysis(cache_key)
        if cached_result:
            logger.info("[bot] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
            return cached_result
        
        # –ù–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async def progress_callback(message: str):
            """Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
            try:
                if update and hasattr(update, 'edit_message_text'):
                    await update.edit_message_text(message)
                elif bot and chat_id:
                    await bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                logger.warning(f"[bot] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")
        
        try:
            analysis_result = await analyzer.analyze_tender_documents(
                tender_data, files, progress_callback=progress_callback
            )
            
            if analysis_result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                cache_analysis_result(cache_key, analysis_result)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if update and hasattr(update, 'from_user'):
                    user_id = update.from_user.id
                    if user_id in self.user_sessions:
                        self.user_sessions[user_id]['search_queries'] = analysis_result.get('search_queries', {})
                
                return analysis_result
            else:
                logger.error("[bot] –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return None
                
        except Exception as e:
            logger.error(f"[bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return None
    
    async def _send_analysis_to_chat(self, bot, chat_id: int, analysis_result: dict) -> None:
        if not analysis_result:
            logger.error(f"[bot] analysis_result is None! –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä. analysis_result: {analysis_result}")
            await bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        if not isinstance(analysis_result, dict):
            logger.error(f"[bot] analysis_result –Ω–µ dict: {analysis_result}")
            await bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        overall = analysis_result.get('overall_analysis', {})
        summary = overall.get('summary', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        # --- –í—ã—Ä–µ–∑–∞–µ–º —Ä–∞–∑–¥–µ–ª '–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã' –∏–∑ summary –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        import re
        summary_clean = re.split(r'–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\s*:?', summary, maxsplit=1, flags=re.IGNORECASE)[0].strip()
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —á–∞—Å—Ç–∏
        if len(summary_clean) > 4000:
            parts = [summary_clean[i:i+4000] for i in range(0, len(summary_clean), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    await bot.send_message(chat_id=chat_id, text=f"ü§ñ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞** (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode='Markdown')
                else:
                    await bot.send_message(chat_id=chat_id, text=f"ü§ñ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞** (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode='Markdown')
        else:
            await bot.send_message(chat_id=chat_id, text=f"ü§ñ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞:**\n\n{summary_clean}", parse_mode='Markdown')
        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã GPT –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---
        search_queries = analysis_result.get('search_queries', {})
        for user_id, session in self.user_sessions.items():
            if session.get('status') in ['ready_for_analysis', 'completed']:
                session['search_queries'] = search_queries
        if not search_queries:
            await bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–Ω–¥–µ—Ä –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É 'üîé –ù–∞–π—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤' ---
        keyboard = [[InlineKeyboardButton("üîé –ù–∞–π—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", callback_data="find_suppliers")]]
        await bot.send_message(chat_id=chat_id, text="–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞?", reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def _send_analysis(self, update: Update, analysis_result: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        if not analysis_result:
            logger.error(f"[bot] analysis_result is None! –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä. analysis_result: {analysis_result}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        if not isinstance(analysis_result, dict):
            logger.error(f"[bot] analysis_result –Ω–µ dict: {analysis_result}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        overall = analysis_result.get('overall_analysis', {})
        summary = overall.get('summary', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —á–∞—Å—Ç–∏
        if len(summary) > 4000:
            parts = [summary[i:i+4000] for i in range(0, len(summary), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    await update.message.reply_text(f"ü§ñ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞** (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode='Markdown')
                else:
                    await update.message.reply_text(f"ü§ñ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞** (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"ü§ñ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞:**\n\n{summary}", parse_mode='Markdown')
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        except Exception as e:
            logger.warning(f"[bot] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback: {e}")
        
        try:
            logger.info(f"[bot] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if query.data == "help":
                await self.help_command(update, context)
            elif query.data == "status":
                await self.status_command(update, context)
            elif query.data == "cleanup":
                await self.cleanup_command(update, context)
            elif query.data == "products":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"
                valid, session = validate_user_session(user_id, self.user_sessions, 'ready_for_analysis')
                if not valid:
                    await handle_session_error(query)
                    return
                tender_data = session['tender_data']
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await self._send_products_list_to_chat(context.bot, query.message.chat_id, tender_data, page=0)
            elif query.data == "documents":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–∫—É–º–µ–Ω—Ç—ã"
                valid, session = validate_user_session(user_id, self.user_sessions, 'ready_for_analysis')
                if not valid:
                    await handle_session_error(query)
                    return
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
                tender_data = session['tender_data']
                reg_number = extract_tender_number(str(tender_data))
                if not reg_number:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞.")
                    return
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await self._send_documents_list_with_download(
                    context.bot, 
                    query.message.chat_id, 
                    tender_data, 
                    reg_number, 
                    page=0
                )
            elif query.data == "detailed_info":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                valid, session = validate_user_session(user_id, self.user_sessions, 'ready_for_analysis')
                if not valid:
                    await handle_session_error(query)
                    return
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
                tender_data = session['tender_data']
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await self._send_detailed_info_to_chat(context.bot, query.message.chat_id, tender_data)
            elif query.data == "analyze":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
                valid, session = validate_user_session(user_id, self.user_sessions, 'ready_for_analysis')
                if not valid:
                    await handle_session_error(query)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
                tender_data = session['tender_data']
                
                await context.bot.send_message(chat_id=query.message.chat_id, text="ü§ñ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
                
                try:
                    # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    reg_number = extract_tender_number(str(tender_data))
                    if not reg_number:
                        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
                        return
                        
                    files = await downloader.download_documents(tender_data, reg_number)
                    if not files or files.get('success', 0) == 0:
                        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                        return
                        
                    session['files'] = files.get('files', [])
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    analysis_result = await self._analyze_documents(
                        tender_data, 
                        files.get('files', []), 
                        update=query, 
                        chat_id=query.message.chat_id, 
                        bot=context.bot
                    )
                    
                    if analysis_result:
                        await self._send_analysis_to_chat(context.bot, query.message.chat_id, analysis_result)
                        session['status'] = 'completed'
                    else:
                        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
                        
                except Exception as e:
                    logger.error(f"[bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
                    await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            elif query.data.startswith("products_page_"):
                try:
                    page = int(query.data.split("_")[2])
                except Exception:
                    page = 0
                valid, session = validate_user_session(user_id, self.user_sessions, 'ready_for_analysis')
                if not valid:
                    await handle_session_error(query)
                    return
                tender_data = session['tender_data']
                # –ù–∞–≤–∏–≥–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.info(f"[bot] –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º: page={page}")
                await self._send_products_list_to_chat(context.bot, query.message.chat_id, tender_data, page=page)
            elif query.data == "current_page":
                await query.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            elif query.data.startswith("documents_page_"):
                page = int(query.data.split('_')[-1])
                valid, session = validate_user_session(user_id, self.user_sessions, 'ready_for_analysis')
                if not valid:
                    await handle_session_error(query)
                    return
                tender_data = session['tender_data']
                reg_number = extract_tender_number(str(tender_data))
                if not reg_number:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞.")
                    return
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await self._send_documents_list_with_download(
                    context.bot, 
                    query.message.chat_id, 
                    tender_data, 
                    reg_number, 
                    page
                )
            elif query.data.startswith("download_"):
                file_id = query.data.split('_', 1)[1]
                valid, session = validate_user_session(user_id, self.user_sessions, 'ready_for_analysis')
                if not valid:
                    await handle_session_error(query)
                    return
                tender_data = session['tender_data']
                reg_number = extract_tender_number(str(tender_data))
                if not reg_number:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞.")
                    return
                    
                try:
                    file_path = downloader.get_file_path(reg_number, file_id)
                    if file_path and os.path.exists(file_path):
                        with open(file_path, 'rb') as f:
                            await context.bot.send_document(
                                chat_id=query.message.chat_id,
                                document=f,
                                filename=os.path.basename(file_path)
                            )
                    else:
                        await query.edit_message_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except Exception as e:
                    logger.error(f"[bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            elif query.data == "find_suppliers":
                # –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞: –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º (—Ç–æ–ª—å–∫–æ –ø–æ GPT)
                valid, session = validate_user_session(user_id, self.user_sessions, 'ready_for_analysis')
                if not valid:
                    await handle_session_error(query)
                    return
                search_queries = session.get('search_queries', {})
                if not search_queries:
                    await query.edit_message_text("–í —ç—Ç–æ–º —Ç–µ–Ω–¥–µ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ò–ò –Ω–µ –≤—ã–¥–µ–ª–∏–ª –∏—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞). –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∑–∞–∫—É–ø–∫–∞ —É—Å–ª—É–≥ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
                    return
                keyboard = []
                for idx, (position, query_text) in enumerate(search_queries.items()):
                    keyboard.append([InlineKeyboardButton(position, callback_data=f"find_supplier_{idx}")])
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            elif query.data.startswith("find_supplier_"):
                valid, session = validate_user_session(user_id, self.user_sessions, 'ready_for_analysis')
                if not valid:
                    await handle_session_error(query)
                    return
                idx = int(query.data.split('_')[-1])
                search_queries = session.get('search_queries', {})
                if idx >= len(search_queries):
                    await query.edit_message_text("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                position = list(search_queries.keys())[idx]
                search_query = list(search_queries.values())[idx]
                logger.info(f"[bot] –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è SerpAPI –ø–æ –ø–æ–∑–∏—Ü–∏–∏ '{position}': {search_query}")
                await query.edit_message_text(f"üîé –ò—â—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏–∏: {position} (–ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query})...")
                
                try:
                    search_results = await self._search_suppliers_serpapi(search_query)
                    gpt_result = await self._extract_suppliers_gpt_ranked(search_query, search_results)
                    await context.bot.send_message(chat_id=query.message.chat_id, text=gpt_result, parse_mode='HTML')
                except Exception as e:
                    logger.error(f"[bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")
                    await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {str(e)}")
        except Exception as e:
            logger.error(f"[bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
    
    async def _search_suppliers_serpapi(self, query):
        from concurrent.futures import ThreadPoolExecutor
        import asyncio
        loop = asyncio.get_event_loop()
        def search(lang):
            params = {
                "engine": "yandex",
                "text": query,
                "lang": lang,
                "api_key": SERPAPI_KEY,
                "num": 20
            }
            search = GoogleSearch(params)
            return search.get_dict()
        with ThreadPoolExecutor() as executor:
            ru = await loop.run_in_executor(executor, search, 'ru')
            en = await loop.run_in_executor(executor, search, 'en')
        return {'ru': ru, 'en': en}

    async def _extract_suppliers_gpt_ranked(self, search_query, search_results):
        if not httpx or not BeautifulSoup:
            return ("–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: httpx –∏ beautifulsoup4.\n"
                    "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: pip install httpx beautifulsoup4")
        links = []
        for lang in ['ru', 'en']:
            for item in search_results[lang].get('organic_results', []):
                url = item.get('link') or item.get('url')
                if not url:
                    continue
                netloc = urlparse(url).netloc.lower()
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–æ–º–µ–Ω—É –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                if any(domain in netloc for domain in EXCLUDE_DOMAINS):
                    continue
                if any(pat in url.lower() for pat in EXCLUDE_PATTERNS):
                    continue
                if any(word in url.lower() for word in EXCLUDE_MINUS_WORDS):
                    continue
                links.append(url)
        if not links:
            return "–í –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∞–π—Ç–æ–≤ (–≤—Å–µ —Å—Å—ã–ª–∫–∏ ‚Äî –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã, –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –∏–ª–∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã)."
        filtered_links = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–∞–π—Ç—ã –∏–∑ –≤—ã–¥–∞—á–∏ (–¥–æ 40), –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        for url in links:
            logger.info(f"[bot] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç: {url}")
            
            # PDF-—Ñ–∏–ª—å—Ç—Ä
            if url.lower().endswith('.pdf'):
                logger.info(f"[bot] ‚ùå {url} ‚Äî –æ—Ç—Å–µ—è–Ω: PDF —Ñ–∞–π–ª")
                continue
            mime, _ = mimetypes.guess_type(url)
            if mime and 'pdf' in mime:
                logger.info(f"[bot] ‚ùå {url} ‚Äî –æ—Ç—Å–µ—è–Ω: PDF mime-type")
                continue
                
            html = await fetch_html(url)
            if not html:
                logger.info(f"[bot] ‚ùå {url} ‚Äî –æ—Ç—Å–µ—è–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å HTML")
                continue
                
            html_lower = html.lower()
            
            # –ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –≤ HTML
            minus_words_found = [word for word in EXCLUDE_MINUS_WORDS if word in html_lower]
            if minus_words_found:
                logger.info(f"[bot] ‚ùå {url} ‚Äî –æ—Ç—Å–µ—è–Ω: –Ω–∞–π–¥–µ–Ω—ã –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞: {minus_words_found}")
                continue
                
            # –û—Å–ª–∞–±–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π
            has_price = "—Ü–µ–Ω–∞" in html_lower or "—Ä—É–±" in html_lower or "‚ÇΩ" in html_lower
            has_contacts = "@" in html_lower or "phone" in html_lower or "tel:" in html_lower
            has_keywords = any(word in html_lower for word in ["–æ–ø—Ç", "–∑–∞–∫–∞–∑", "–ø–æ—Å—Ç–∞–≤–∫–∞", "–∫—É–ø–∏—Ç—å", "–ø—Ä–æ–¥–∞–∂–∞"])
            
            if not (has_price or has_contacts or has_keywords):
                logger.info(f"[bot] ‚ùå {url} ‚Äî –æ—Ç—Å–µ—è–Ω: –Ω–µ—Ç –Ω–∏ —Ü–µ–Ω, –Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –Ω–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
                continue
            else:
                logger.info(f"[bot] ‚úÖ {url} ‚Äî –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: —Ü–µ–Ω–∞={has_price}, –∫–æ–Ω—Ç–∞–∫—Ç—ã={has_contacts}, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞={has_keywords}")
                
            # Title/h1-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            try:
                soup = BeautifulSoup(html, 'html.parser')
                title = soup.title.string.lower() if soup.title and soup.title.string else ''
                h1 = soup.h1.string.lower() if soup.h1 and soup.h1.string else ''
                bad_title_words = [word for word in ["—Ç–µ–Ω–¥–µ—Ä", "pdf", "–∞—Ä—Ö–∏–≤", "–¥–æ–∫—É–º–µ–Ω—Ç"] if word in title]
                bad_h1_words = [word for word in ["—Ç–µ–Ω–¥–µ—Ä", "pdf", "–∞—Ä—Ö–∏–≤", "–¥–æ–∫—É–º–µ–Ω—Ç"] if word in h1]
                if bad_title_words or bad_h1_words:
                    logger.info(f"[bot] ‚ùå {url} ‚Äî –æ—Ç—Å–µ—è–Ω: –ø–ª–æ—Ö–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: title={bad_title_words}, h1={bad_h1_words}")
                    continue
            except Exception as e:
                logger.warning(f"[bot] ‚ö†Ô∏è {url} ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
                pass
                
            # –û—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Å—É —Å–ª–æ–≤ (30% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏)
            relevant_words = ["—Ü–µ–Ω–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω", "e-mail", "–æ–ø—Ç", "–∑–∞–∫–∞–∑", "–ø–æ—Å—Ç–∞–≤–∫–∞", "–∫—É–ø–∏—Ç—å", "–ø—Ä–æ–¥–∞–∂–∞", "–∫–æ–Ω—Ç–∞–∫—Ç—ã"]
            found_words = [word for word in relevant_words if word in html_lower]
            weight = len(found_words)
            max_possible_weight = len(relevant_words)
            relevance_percent = (weight / max_possible_weight) * 100
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∞–π—Ç—ã —Å 30% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            if relevance_percent >= 30:
                logger.info(f"[bot] ‚úÖ {url} ‚Äî —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å {relevance_percent:.1f}% (–Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞: {found_words})")
                filtered_links.append((weight, url, html, relevance_percent))
            else:
                logger.info(f"[bot] ‚ùå {url} ‚Äî –æ—Ç—Å–µ—è–Ω: –Ω–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å {relevance_percent:.1f}% (–Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞: {found_words})")
                
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å—É (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏)
        filtered_links.sort(key=lambda x: x[3], reverse=True)  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        if not filtered_links:
            return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∞–π—Ç–æ–≤ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, PDF, –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞, –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏)."
            
        logger.info(f"[bot] –ù–∞–π–¥–µ–Ω–æ {len(filtered_links)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∞–π—Ç–æ–≤ –∏–∑ {len(links)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö")
        for i, (weight, url, html, relevance) in enumerate(filtered_links[:10]):
            logger.info(f"[bot] –¢–æ–ø {i+1}: {url} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.1f}%)")
            
        results = []
        client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò –º–∞–∫—Å–∏–º—É–º 10 –ª—É—á—à–∏—Ö —Å–∞–π—Ç–æ–≤
        for weight, url, html, relevance in filtered_links[:10]:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä HTML –¥–ª—è GPT (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8000 —Å–∏–º–≤–æ–ª–æ–≤)
            html_short = html[:8000] if html else ''
            prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–∞–π—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.

–≠—Ç–æ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –º–µ–Ω—é –∏ —Ñ—É—Ç–µ—Ä–∞).

–í–æ—Ç HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏–ª–∞—Å—å –ø–æ –∑–∞–ø—Ä–æ—Å—É:
"{search_query}"

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç HTML –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –ï—Å—Ç—å –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ **—Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ**, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å—É? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Å–∞–π—Ç –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω.
2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å—Ç—å, —Ç–æ –∏–∑–≤–ª–µ–∫–∏ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
   ‚Äì –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞  
   ‚Äì –¶–µ–Ω–∞ (–≤ —Ä—É–±–ª—è—Ö, –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: –∫–≥, –º–µ—à–æ–∫, —à—Ç –∏ —Ç.–¥.)  
   ‚Äì –£–ø–∞–∫–æ–≤–∫–∞ / —Ñ–∞—Å–æ–≤–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ—à–∫–∏ –ø–æ 25 –∫–≥)  
   ‚Äì –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)  
   ‚Äì –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ —Å–∞–π—Ç–∞  
   ‚Äì –¢–µ–ª–µ—Ñ–æ–Ω, e-mail, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã  
   ‚Äì –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)  
   ‚Äì –†–µ–≥–∏–æ–Ω –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)

‚ö†Ô∏è –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: –¥–∞ / –Ω–µ—Ç  
–¢–æ–≤–∞—Ä: ...  
–¶–µ–Ω–∞: ...  
–§–∞—Å–æ–≤–∫–∞: ...  
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º: ...  
–ö–æ–º–ø–∞–Ω–∏—è: ...  
–ö–æ–Ω—Ç–∞–∫—Ç—ã: ...  
–°–∞–π—Ç: ...  
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ... (–µ—Å–ª–∏ –µ—Å—Ç—å)

–í–æ—Ç HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
{html_short}
"""
            try:
                response = await client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=800,
                    temperature=0.2,
                )
                answer = response.choices[0].message.content
                results.append(f"<b>–°–∞–π—Ç:</b> {url} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.1f}%)\n{answer.strip()}")
            except Exception as e:
                logger.error(f"[bot] –û—à–∏–±–∫–∞ OpenAI: {e}")
                results.append(f"<b>–°–∞–π—Ç:</b> {url} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.1f}%)\n[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT]")
        return "\n\n".join(results)
    
    async def _send_products_list_to_chat(self, bot, chat_id: int, tender_data: dict, page: int = 0) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∫–∞–∫ –∫–ª—é—á, –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if len(tender_data) == 1 and isinstance(list(tender_data.values())[0], dict):
            tender_data = list(tender_data.values())[0]
        
        products = tender_data.get('–ü—Ä–æ–¥—É–∫—Ç', {}).get('–û–±—ä–µ–∫—Ç—ã–ó–∞–∫', [])
        
        if not products:
            await bot.send_message(chat_id=chat_id, text="üì¶ –¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        items_per_page = 5
        total_pages = (len(products) + items_per_page - 1) // items_per_page
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(products))
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        products_text = f"üì¶ **–¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n"
        
        for i, product in enumerate(products[start_idx:end_idx], start_idx + 1):
            name = product.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            quantity = product.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 0)
            unit = product.get('–ï–¥–ò–∑–º', '')
            price = product.get('–¶–µ–Ω–∞–ï–¥', 0)
            total_cost = product.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 0)
            okpd = product.get('–û–ö–ü–î', '')
            
            products_text += f"{i}. **{name}**\n"
            products_text += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} {unit}\n"
            products_text += f"   üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {format_price(price)} —Ä—É–±.\n"
            products_text += f"   üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_price(total_cost)} —Ä—É–±.\n"
            if okpd:
                products_text += f"   üè∑Ô∏è –û–ö–ü–î: {okpd}\n"
            products_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        nav_buttons = []
        
        if total_pages > 1:
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"products_page_{page-1}"))
            
            nav_buttons.append(InlineKeyboardButton(f"{page + 1}/{total_pages}", callback_data="current_page"))
            
            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"products_page_{page+1}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(chat_id=chat_id, text=products_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _send_documents_list_with_download(self, bot, chat_id: int, tender_data: dict, reg_number: str, page: int = 0) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∫–∞–∫ –∫–ª—é—á, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if len(tender_data) == 1 and isinstance(list(tender_data.values())[0], dict):
            tender_data = list(tender_data.values())[0]
        
        documents = tender_data.get('–î–æ–∫—É–º–µ–Ω—Ç—ã', [])
        
        if not documents:
            await bot.send_message(chat_id=chat_id, text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        items_per_page = 8
        total_pages = (len(documents) + items_per_page - 1) // items_per_page
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(documents))
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        docs_text = f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n"
        
        for i, doc in enumerate(documents[start_idx:end_idx], start_idx + 1):
            name = doc.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            date = doc.get('–î–∞—Ç–∞–†–∞–∑–º', '')
            files = doc.get('–§–∞–π–ª—ã', [])
            
            docs_text += f"{i}. **{name}**\n"
            if date:
                docs_text += f"   üìÖ –î–∞—Ç–∞: {format_date(date)}\n"
            if files:
                docs_text += f"   üìé –§–∞–π–ª–æ–≤: {len(files)}\n"
            docs_text += "\n"
        
        docs_text += "üíæ **–°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"documents_page_{page-1}"))
            
            nav_buttons.append(InlineKeyboardButton(f"{page + 1}/{total_pages}", callback_data="current_page"))
            
            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"documents_page_{page+1}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"download_{reg_number}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await bot.send_message(chat_id=chat_id, text=docs_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _send_detailed_info_to_chat(self, bot, chat_id: int, tender_info: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ"""
        detailed_text = f"""
üè¢ **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ**

üîç **–î–µ—Ç–∞–ª–∏ –∑–∞–∫—É–ø–∫–∏:**
‚Ä¢ **–°–ø–æ—Å–æ–± –∑–∞–∫—É–ø–∫–∏:** {tender_info['procurement_type']}
‚Ä¢ **–ú–µ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∫–∏:** {tender_info['delivery_place']}
‚Ä¢ **–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏:** {tender_info['delivery_terms']}
‚Ä¢ **–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:** {tender_info['guarantee_amount']}
‚Ä¢ **–ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:** {tender_info['funding_source']}

üåç **–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ **–†–µ–≥–∏–æ–Ω:** {tender_info['region']}
‚Ä¢ **–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω:** {tender_info['federal_law']}-–§–ó

üè¢ **–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞:**
‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {tender_info['etp_name']}
‚Ä¢ **–°–∞–π—Ç:** {tender_info['etp_url']}

üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ **–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ:** {tender_info['contact_person']}
‚Ä¢ **–¢–µ–ª–µ—Ñ–æ–Ω:** {format_phone(tender_info['contact_phone'])}
‚Ä¢ **Email:** {tender_info['contact_email']}

üí≥ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏:**
‚Ä¢ **–ò–ö–ó:** {tender_info['ikz']}
‚Ä¢ **–ê–≤–∞–Ω—Å:** {tender_info['advance_percent']}%
‚Ä¢ **–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:** {tender_info['execution_amount']}
‚Ä¢ **–ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ:** {tender_info['bank_support']}
        """
        
        await bot.send_message(chat_id=chat_id, text=detailed_text, parse_mode='Markdown')
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("cleanup", self.cleanup_command))
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def run(self):
        try:
            self.app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
            self.setup_handlers()
            logger.info("üöÄ TenderBot –∑–∞–ø—É—â–µ–Ω")
            print("ü§ñ TenderBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª:", LOG_FILE)
            self.app.run_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {e}")
            raise

    async def _generate_supplier_queries(self, formatted_info):
        # –ü—Ä–∏–º–µ—Ä: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —É–º–Ω–µ–µ, –µ—Å–ª–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        subject = formatted_info.get('subject', '')
        return [subject] if subject else []

# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    bot = TenderBot()
    bot.run()