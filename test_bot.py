#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π TenderBot
"""

import asyncio
import logging
from pathlib import Path
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        import config
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_damia_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç DaMIA"""
    print("üåê –¢–µ—Å—Ç DaMIA –∫–ª–∏–µ–Ω—Ç–∞...")
    try:
        from damia import damia_client
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        test_text = "–¢–µ–Ω–¥–µ—Ä 0123456789012345678 –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤"
        reg_number = damia_client.extract_tender_number(test_text)
        
        if reg_number == "0123456789012345678":
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–Ω–¥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: {reg_number}")
            return False
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏
        test_url = "https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber=0123456789012345678"
        reg_number = damia_client.extract_tender_number(test_url)
        
        if reg_number == "0123456789012345678":
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏: {reg_number}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DaMIA –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

async def test_downloader():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    print("üì• –¢–µ—Å—Ç –º–æ–¥—É–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
    try:
        from downloader import downloader
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if downloader.download_dir.exists():
            print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_name = downloader._create_safe_filename("0123456789012345678", "test_document.pdf")
        if "0123456789012345678" in safe_name and "test_document.pdf" in safe_name:
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {safe_name}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return False

async def test_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞"""
    print("ü§ñ –¢–µ—Å—Ç –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    try:
        from analyzer import analyzer
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        empty_analysis = analyzer._create_empty_analysis()
        if "overall_analysis" in empty_analysis:
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            return False
        
        # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        from analyzer import get_cache_key, cache_analysis_result, get_cached_analysis
        test_data = {"test": "data"}
        test_files = [{"path": "test.txt"}]
        cache_key = get_cache_key(test_data, test_files)
        if cache_key:
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫—ç—à–∞")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

async def test_utils():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç—ã"""
    print("üîß –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç...")
    try:
        from utils import validate_user_session, format_file_size, sanitize_filename
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
        user_sessions = {123: {"status": "ready_for_analysis", "data": "test"}}
        valid, session = validate_user_session(123, user_sessions, "ready_for_analysis")
        if valid and session:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏")
            return False
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        size_str = format_file_size(1024)
        if "1.0KB" in size_str:
            print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {size_str}")
            return False
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_name = sanitize_filename("test file (1).pdf")
        if "test_file_1_.pdf" in safe_name:
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {safe_name}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç: {e}")
        return False

async def test_api_connections():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    print("üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ API...")
    
    try:
        import config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        if config.TELEGRAM_TOKEN and config.TELEGRAM_TOKEN != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_—Ç–æ–∫–µ–Ω':
            print("‚úÖ Telegram —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if config.DAMIA_API_KEY and config.DAMIA_API_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_API_–∫–ª—é—á':
            print("‚úÖ DaMIA API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è DaMIA API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if config.OPENAI_API_KEY and config.OPENAI_API_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_OpenAI_–∫–ª—é—á':
            print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if config.SERPAPI_KEY and config.SERPAPI_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_SerpAPI_–∫–ª—é—á':
            print("‚úÖ SerpAPI –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è SerpAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: {e}")
        return False

async def test_file_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        "bot.py",
        "config.py", 
        "damia.py",
        "downloader.py",
        "analyzer.py",
        "utils.py",
        "handlers.py",
        "requirements.txt",
        "README.md",
        "env_example.txt",
        ".gitignore"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

async def test_full_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üß† –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞ (GPT + –ø–∞—Ä—Å–∏–Ω–≥)...")
    try:
        from analyzer import analyze_tender_documents
        import logging
        logger = logging.getLogger(__name__)

        # –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_filename = "test.txt"
        test_text = "–ü–æ—Å—Ç–∞–≤–∫–∞ –º–æ—Ä–∫–æ–≤–∏, —Ñ–∞—Å–æ–≤–∫–∞ 25 –∫–≥, –ì–û–°–¢ 12345-67, –æ–±—ä–µ–º 10 —Ç–æ–Ω–Ω, —Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏ 10 –¥–Ω–µ–π."
        with open(test_filename, "w", encoding="utf-8") as f:
            f.write(test_text)
        downloaded_files = [{
            'path': test_filename,
            'original_name': test_filename,
            'size': os.path.getsize(test_filename),
        }]
        tender_info = {}
        analysis_result = await analyze_tender_documents(tender_info, downloaded_files)
        logger.info(f"[test] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis_result}")
        if not analysis_result:
            print("‚ùå analysis_result is None! –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–Ω–¥–µ—Ä.")
            return False
        logger.info(f"[test] –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –∞–Ω–∞–ª–∏–∑–∞: {analysis_result}")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.remove(test_filename)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

async def test_retry_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç retry-–ª–æ–≥–∏–∫—É"""
    print("üîÑ –¢–µ—Å—Ç retry-–ª–æ–≥–∏–∫–∏...")
    try:
        from utils import retry_on_error
        
        @retry_on_error(max_retries=2, delay=0.1)
        async def failing_function():
            raise Exception("Test error")
        
        try:
            await failing_function()
            print("‚ùå Retry-–ª–æ–≥–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")
            return False
        except Exception as e:
            if "Test error" in str(e):
                print("‚úÖ Retry-–ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è retry-–ª–æ–≥–∏–∫–∏: {e}")
        return False

async def test_caching():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üíæ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        from utils import get_cache_key, cache_analysis_result, get_cached_analysis
        
        test_data = {"test": "data"}
        test_files = [{"path": "test.txt"}]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
        cache_key = get_cache_key(test_data, test_files)
        if not cache_key:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∫—ç—à–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –ø—É—Å—Ç–æ–π
        cached = get_cached_analysis(cache_key)
        if cached is None:
            print("‚úÖ –ö—ç—à –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π")
        else:
            print("‚ùå –ö—ç—à –Ω–µ –ø—É—Å—Ç–æ–π")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
        test_result = {"result": "test"}
        cache_analysis_result(cache_key, test_result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        cached = get_cached_analysis(cache_key)
        if cached and cached.get("result") == "test":
            print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ TenderBot")
    print("=" * 50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("DaMIA –∫–ª–∏–µ–Ω—Ç", test_damia_client),
        ("–ú–æ–¥—É–ª—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", test_downloader),
        ("–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞", test_analyzer),
        ("–£—Ç–∏–ª–∏—Ç—ã", test_utils),
        ("API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", test_api_connections),
        ("Retry-–ª–æ–≥–∏–∫–∞", test_retry_logic),
        ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", test_caching),
        ("–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", test_full_analysis),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}...")
        try:
            result = await test_func()
            results.append((test_name, result))
            if result:
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(run_all_tests()) 