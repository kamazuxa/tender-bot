import requests

EXPORTBASE_API_URL = "https://export-base.ru/api/"
EXPORTBASE_API_KEY = "–í–ê–®_API_–ö–õ–Æ–ß"  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ config

def get_company_by_inn(inn: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù —á–µ—Ä–µ–∑ ExportBase API"""
    params = {
        "inn": inn,
        "key": EXPORTBASE_API_KEY
    }
    response = requests.get(EXPORTBASE_API_URL + "company/", params=params)
    response.raise_for_status()
    data = response.json()
    # companies_data ‚Äî –º–∞—Å—Å–∏–≤ –∫–æ–º–ø–∞–Ω–∏–π, –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é
    companies = data.get("companies_data", [])
    return companies[0] if companies else {}

def get_full_company_profile_by_inn(inn: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù (–≤—Å–µ –ø–æ–ª—è) —á–µ—Ä–µ–∑ ExportBase API"""
    params = {
        "inn": inn,
        "key": EXPORTBASE_API_KEY
    }
    response = requests.get(EXPORTBASE_API_URL + "company/", params=params)
    response.raise_for_status()
    data = response.json()
    companies = data.get("companies_data", [])
    return companies[0] if companies else {}

def format_company_info(company: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è Telegram"""
    return (
        f"üè¢ <b>{company.get('legal_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
        f"–ò–ù–ù: <code>{company.get('inn', '‚Äî')}</code>\n"
        f"–û–ì–†–ù: <code>{company.get('ogrn', '‚Äî')}</code>\n"
        f"–û–ö–í–≠–î: {company.get('main_okved_code', '‚Äî')} {company.get('main_okved_name', '')}\n"
        f"–ê–¥—Ä–µ—Å: {company.get('address', '‚Äî')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {company.get('stationary_phone', '‚Äî')} / {company.get('mobile_phone', '‚Äî')}\n"
        f"Email: {company.get('email', '‚Äî')}\n"
        f"–°–∞–π—Ç: {company.get('site', '‚Äî')}\n"
        f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {company.get('ceo_name', '‚Äî')} ({company.get('ceo_position', '‚Äî')})\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {company.get('reg_date', '‚Äî')}\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {company.get('employees', '‚Äî')}\n"
        f"–í—ã—Ä—É—á–∫–∞: {company.get('income', '‚Äî')} —Ç—ã—Å. —Ä—É–±.\n"
        f"–°—Ç–∞—Ç—É—Å: {'–î–µ–π—Å—Ç–≤—É—é—â–∞—è' if company.get('active', 1) == 1 else '–ó–∞–∫—Ä—ã—Ç–∞'}"
    )

def format_full_company_profile(company: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è Telegram (–≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è)"""
    if not company:
        return "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    fields = [
        ("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", company.get("legal_name", "‚Äî")),
        ("–ò–ù–ù", company.get("inn", "‚Äî")),
        ("–û–ì–†–ù", company.get("ogrn", "‚Äî")),
        ("–ö–ü–ü", company.get("kpp", "‚Äî")),
        ("–ê–¥—Ä–µ—Å", company.get("address", "‚Äî")),
        ("–†–µ–≥–∏–æ–Ω", company.get("region", "‚Äî")),
        ("–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç", company.get("locality", "‚Äî")),
        ("–û–ö–í–≠–î", f"{company.get('main_okved_code', '‚Äî')} {company.get('main_okved_name', '')}"),
        ("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", company.get("reg_date", "‚Äî")),
        ("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", company.get("employees", "‚Äî")),
        ("–í—ã—Ä—É—á–∫–∞", f"{company.get('income', '‚Äî')} —Ç—ã—Å. —Ä—É–±."),
        ("–¢–µ–ª–µ—Ñ–æ–Ω", company.get("stationary_phone", "‚Äî")),
        ("–ú–æ–±–∏–ª—å–Ω—ã–π", company.get("mobile_phone", "‚Äî")),
        ("Email", company.get("email", "‚Äî")),
        ("–°–∞–π—Ç", company.get("site", "‚Äî")),
        ("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", f"{company.get('ceo_name', '‚Äî')} ({company.get('ceo_position', '‚Äî')})"),
        ("–°—Ç–∞—Ç—É—Å", "–î–µ–π—Å—Ç–≤—É—é—â–∞—è" if company.get("active", 1) == 1 else "–ó–∞–∫—Ä—ã—Ç–∞")
    ]
    result = "<b>–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏</b>\n"
    for name, value in fields:
        result += f"<b>{name}:</b> {value}\n"
    return result.strip() 