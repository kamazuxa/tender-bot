"""
DaMIA API –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª —á–µ—Ä–µ–∑ API-–ê—Ä–±–∏—Ç—Ä–∞–∂–∏
"""

import httpx
import asyncio
import logging
from typing import Dict, List, Optional
from config import DAMIA_ARBITR_API_KEY, DAMIA_ARBITR_BASE_URL

logger = logging.getLogger(__name__)

class DamiaArbitrAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DaMIA API –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª"""
    
    def __init__(self):
        self.api_key = DAMIA_ARBITR_API_KEY
        self.base_url = DAMIA_ARBITR_BASE_URL
        self.timeout = 30.0
        self.max_retries = 3
        self.retry_delay = 1.0
    
    async def _make_request(self, endpoint: str, params: Optional[Dict] = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        headers = {
            "User-Agent": "TenderBot/1.0",
            "Accept": "application/json",
            "Content-Type": "application/json"
        }
        
        for attempt in range(self.max_retries):
            try:
                async with httpx.AsyncClient(timeout=self.timeout) as client:
                    url = f"{self.base_url}/{endpoint}"
                    response = await client.get(url, headers=headers, params=params)
                    
                    if response.status_code == 200:
                        return response.json()
                    elif response.status_code == 404:
                        logger.warning(f"[arbitr] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {endpoint}: {params}")
                        return None
                    else:
                        logger.error(f"[arbitr] –û—à–∏–±–∫–∞ API {endpoint}: {response.status_code} - {response.text}")
                        
            except httpx.TimeoutException:
                logger.warning(f"[arbitr] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            except Exception as e:
                logger.error(f"[arbitr] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint}: {e}")
            
            if attempt < self.max_retries - 1:
                await asyncio.sleep(self.retry_delay * (attempt + 1))
        
        return None
    
    async def get_arbitrage_case(self, case_number: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º –¥–µ–ª–µ –ø–æ –Ω–æ–º–µ—Ä—É
        –ú–µ—Ç–æ–¥: delo
        """
        logger.info(f"[arbitr] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º –¥–µ–ª–µ: {case_number}")
        
        params = {
            'regn': case_number,
            'key': self.api_key
        }
        
        result = await self._make_request('delo', params)
        
        if result:
            return {
                "case_number": case_number,
                "data": result,
                "status": "found"
            }
        
        return {
            "case_number": case_number,
            "data": None,
            "status": "not_found"
        }
    
    async def get_arbitrage_cases_by_inn(self, inn: str, role: Optional[str] = None, case_type: Optional[str] = None, 
                                       status: Optional[str] = None, format_type: int = 1) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–∏—è—Ö –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö –ø–æ –ò–ù–ù
        –ú–µ—Ç–æ–¥: dela
        """
        logger.info(f"[arbitr] –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª –¥–ª—è –ò–ù–ù: {inn}")
        
        params = {
            'q': inn,
            'format': format_type,
            'key': self.api_key
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if role:
            params['role'] = role
        if case_type:
            params['type'] = case_type
        if status:
            params['status'] = status
        
        result = await self._make_request('dela', params)
        
        if result:
            return {
                "inn": inn,
                "cases": result.get('result', []),
                "total_count": result.get('count', 0),
                "has_next_page": result.get('next_page', False),
                "status": "found"
            }
        
        return {
            "inn": inn,
            "cases": [],
            "total_count": 0,
            "has_next_page": False,
            "status": "not_found"
        }
    
    async def track_arbitrage_case(self, case_number: str, action: str = 'email', 
                                 email: Optional[str] = None) -> Dict:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º –¥–µ–ª–µ
        –ú–µ—Ç–æ–¥: delopro
        """
        logger.info(f"[arbitr] –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –¥–µ–ª–∞: {case_number}")
        
        params = {
            'regn': case_number,
            'a': action,
            'key': self.api_key
        }
        
        if email:
            params['email'] = email
        
        result = await self._make_request('delopro', params)
        
        if result:
            return {
                "case_number": case_number,
                "action": action,
                "data": result,
                "status": "success"
            }
        
        return {
            "case_number": case_number,
            "action": action,
            "data": None,
            "status": "failed"
        }
    
    async def get_tracked_cases(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª
        –ú–µ—Ç–æ–¥: delopro —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º a=list
        """
        logger.info("[arbitr] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–µ–ª")
        
        params = {
            'a': 'list',
            'key': self.api_key
        }
        
        result = await self._make_request('delopro', params)
        
        if result:
            return {
                "tracked_cases": result,
                "status": "success"
            }
        
        return {
            "tracked_cases": [],
            "status": "failed"
        }
    
    def format_arbitrage_summary(self, cases_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–º –¥–µ–ª–∞–º"""
        if not cases_data or cases_data.get('status') != 'found':
            return "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        cases = cases_data.get('cases', [])
        total_count = cases_data.get('total_count', 0)
        
        if not cases:
            return "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        summary = f"üìã –ù–∞–π–¥–µ–Ω–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª: {total_count}\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
        roles = {
            '1': '–ò—Å—Ç–µ—Ü',
            '2': '–û—Ç–≤–µ—Ç—á–∏–∫', 
            '3': '–¢—Ä–µ—Ç—å–µ –ª–∏—Ü–æ',
            '4': '–ò–Ω–æ–µ –ª–∏—Ü–æ'
        }
        
        role_counts = {}
        for case in cases:
            role = case.get('role', '4')
            role_counts[role] = role_counts.get(role, 0) + 1
        
        for role_code, role_name in roles.items():
            if role_code in role_counts:
                summary += f"‚Ä¢ {role_name}: {role_counts[role_code]} –¥–µ–ª\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ª–∞
        summary += "\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ª–∞:\n"
        for i, case in enumerate(cases[:5], 1):
            case_number = case.get('case_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            case_type = case.get('case_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            status = case.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            summary += f"{i}. {case_number} ({case_type}) - {status}\n"
        
        return summary

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
arbitr_api = DamiaArbitrAPI() 