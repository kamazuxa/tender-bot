#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π API
"""

import asyncio
import logging
from config import FNS_API_KEY
from fns_api import fns_api
from arbitr_api import arbitr_api
from fssp_api import fssp_client
from scoring_api import scoring_api

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_fns_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –§–ù–°"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –§–ù–°...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ò–ù–ù (–û–û–û "–ì–∞–∑–ø—Ä–æ–º")
    inn = "7736050003"
    
    try:
        print(f"\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ò–ù–ù {inn}...")
        company_data = await fns_api.get_company_info(inn)
        
        print(f"–°—Ç–∞—Ç—É—Å: {company_data.get('status')}")
        if company_data.get('status') == 'found':
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(company_data.get('data', []))}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
            formatted_info = fns_api.format_company_info(company_data)
            print("\nüìÑ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            print(formatted_info)
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ò–ù–ù {inn}...")
        check_data = await fns_api.check_company(inn)
        
        print(f"–°—Ç–∞—Ç—É—Å: {check_data.get('status')}")
        if check_data.get('status') == 'found':
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {check_data.get('company_type')}")
            print(f"–ï—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è: {check_data.get('has_violations')}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
            formatted_check = fns_api.format_company_check(check_data)
            print("\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            print(formatted_check)
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
        print(f"\nüîé –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '–ì–∞–∑–ø—Ä–æ–º'...")
        search_data = await fns_api.search_companies("–ì–∞–∑–ø—Ä–æ–º", page=1)
        
        print(f"–°—Ç–∞—Ç—É—Å: {search_data.get('status')}")
        if search_data.get('status') == 'found':
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {search_data.get('total_count')}")
            
            companies = search_data.get('companies', [])
            if companies:
                print("\nüìã –ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                for i, company in enumerate(companies[:3], 1):
                    if '–Æ–õ' in company:
                        company_info = company['–Æ–õ']
                        name = company_info.get('–ù–∞–∏–º–°–æ–∫—Ä–Æ–õ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        inn_company = company_info.get('–ò–ù–ù', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        status = company_info.get('–°—Ç–∞—Ç—É—Å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        print(f"{i}. {name} (–ò–ù–ù: {inn_company}, –°—Ç–∞—Ç—É—Å: {status})")
                    elif '–ò–ü' in company:
                        company_info = company['–ò–ü']
                        name = company_info.get('–§–ò–û–ü–æ–ª–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        inn_company = company_info.get('–ò–ù–ù', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        status = company_info.get('–°—Ç–∞—Ç—É—Å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        print(f"{i}. –ò–ü {name} (–ò–ù–ù: {inn_company}, –°—Ç–∞—Ç—É—Å: {status})")
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å—á–µ—Ç–∞
        print(f"\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å—á–µ—Ç–∞ –¥–ª—è –ò–ù–ù {inn}...")
        blocks_data = await fns_api.check_account_blocks(inn)
        
        print(f"–°—Ç–∞—Ç—É—Å: {blocks_data.get('status')}")
        if blocks_data.get('status') == 'found':
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω—ã")
            blocks = blocks_data.get('blocks_data', [])
            print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö: {len(blocks)}")
            
            if blocks:
                print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö:")
                for i, block in enumerate(blocks, 1):
                    print(f"{i}. {block}")
            else:
                print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å—á–µ—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –§–ù–°: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –§–ù–°: {e}")

async def test_arbitr_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª"""
    print("\n‚öñÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ò–ù–ù
    inn = "7736050003"
    
    try:
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª –¥–ª—è –ò–ù–ù {inn}...")
        cases_data = await arbitr_api.get_arbitrage_cases_by_inn(inn)
        
        print(f"–°—Ç–∞—Ç—É—Å: {cases_data.get('status')}")
        if cases_data.get('status') == 'found':
            print("‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã")
            cases = cases_data.get('cases', [])
            total_count = cases_data.get('total_count', 0)
            print(f"–ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: {total_count}")
            
            if cases:
                print("\nüìÑ –ü–µ—Ä–≤—ã–µ –¥–µ–ª–∞:")
                for i, case in enumerate(cases[:5], 1):
                    case_number = case.get('case_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    case_type = case.get('case_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    status = case.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    print(f"{i}. {case_number} ({case_type}) - {status}")
            else:
                print("‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print("‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π: {e}")

async def test_fssp_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –§–°–°–ü"""
    print("\nüëÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –§–°–°–ü...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ò–ù–ù
    inn = "7736050003"
    
    try:
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤ –¥–ª—è –ò–ù–ù {inn}...")
        fssp_data = await fssp_client.check_company(inn)
        
        print(f"–°—Ç–∞—Ç—É—Å: {fssp_data.get('status') if fssp_data else 'None'}")
        if fssp_data and fssp_data.get('status') == 'success':
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –§–°–°–ü –ø–æ–ª—É—á–µ–Ω—ã")
            proceedings = fssp_data.get('executive_proceedings', [])
            summary = fssp_data.get('summary', {})
            
            print(f"–í—Å–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤: {summary.get('total_proceedings', 0)}")
            print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary.get('active_proceedings', 0)}")
            print(f"–û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {summary.get('total_debt', 0)} —Ä—É–±.")
            
            if proceedings:
                print("\nüìÑ –ü–µ—Ä–≤—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:")
                for i, proc in enumerate(proceedings[:5], 1):
                    case_number = proc.get('number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    amount = proc.get('amount', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    status = proc.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    print(f"{i}. {case_number} - {amount} - {status}")
            else:
                print("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            error_msg = fssp_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if fssp_data else '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
            print(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –§–°–°–ü: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –§–°–°–ü: {e}")

async def test_scoring_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–∫–æ—Ä–∏–Ω–≥–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–∫–æ—Ä–∏–Ω–≥–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ò–ù–ù
    inn = "7736050003"
    
    try:
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ò–ù–ù {inn}...")
        scoring_data = await scoring_api.get_comprehensive_scoring(inn)
        
        print(f"–°—Ç–∞—Ç—É—Å: {scoring_data.get('status')}")
        if scoring_data.get('status') == 'completed':
            print("‚úÖ –°–∫–æ—Ä–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω")
            results = scoring_data.get('results', {})
            
            print("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ—Ä–∏–Ω–≥–∞:")
            for model_name, model_result in results.items():
                if model_result.get('status') == 'success':
                    score = model_result.get('score', 0)
                    risk_level = model_result.get('risk_level', 'unknown')
                    probability = model_result.get('probability', 0)
                    print(f"‚Ä¢ {model_name}: {score} ({risk_level}, {probability:.1f}%)")
                else:
                    print(f"‚Ä¢ {model_name}: –û—à–∏–±–∫–∞")
        else:
            print("‚ùå –°–∫–æ—Ä–∏–Ω–≥ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —Å–∫–æ—Ä–∏–Ω–≥–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —Å–∫–æ—Ä–∏–Ω–≥–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...")
    print(f"üîë API –∫–ª—é—á –§–ù–°: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if FNS_API_KEY and FNS_API_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_–∫–ª—é—á_–¥–ª—è_–§–ù–°' else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ API
    await test_fns_api()
    await test_arbitr_api()
    await test_fssp_api()
    await test_scoring_api()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 