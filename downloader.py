import os
import aiofiles
import aiohttp
import logging
from typing import Dict, List, Optional, Tuple
from pathlib import Path
from config import DOWNLOAD_DIR, MAX_FILE_SIZE, SUPPORTED_EXTENSIONS
import zipfile
try:
    import rarfile
    RAR_SUPPORT = True
except ImportError:
    RAR_SUPPORT = False

logger = logging.getLogger(__name__)

class DocumentDownloader:
    def __init__(self, download_dir: str = DOWNLOAD_DIR):
        self.download_dir = Path(download_dir)
        self.download_dir.mkdir(exist_ok=True)
    
    async def download_documents(self, tender_data: Dict, reg_number: str) -> Dict:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞
        """
        documents = tender_data.get("–î–æ–∫—É–º–µ–Ω—Ç—ã", [])
        if not documents:
            logger.info(f"[downloader] üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {reg_number}")
            return {"success": 0, "failed": 0, "files": []}
        
        logger.info(f"[downloader] üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        downloaded_files = []
        success_count = 0
        failed_count = 0
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as session:
            for doc in documents:
                try:
                    result = await self._download_single_document(session, doc, reg_number)
                    if result:
                        downloaded_files.append(result)
                        # –ï—Å–ª–∏ —ç—Ç–æ –∞—Ä—Ö–∏–≤, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
                        ext = Path(result['saved_name']).suffix.lower()
                        if ext == '.zip':
                        success_count += 1
                    else:
                        failed_count += 1
                except Exception as e:
                    logger.error(f"[downloader] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                    failed_count += 1
        
        logger.info(f"[downloader] ‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –Ω–µ —É–¥–∞–ª–æ—Å—å")
        
        return {
            "success": success_count,
            "failed": failed_count,
            "files": downloaded_files
        }
    
    async def _download_single_document(self, session: aiohttp.ClientSession, doc: Dict, reg_number: str) -> Optional[Dict]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
        """
        uid = doc.get("externalId")
        name = doc.get("name", "unnamed.doc")
        
        if not uid:
            logger.warning(f"[downloader] ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç UID –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {name}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not self._is_supported_extension(name):
            logger.warning(f"[downloader] ‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {name}")
            return None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        url = f"https://zakupki.gov.ru/44fz/filestore/public/1.0/download/priz/file.html?uid={uid}"
        
        try:
            async with session.get(url) as response:
                if response.status != 200:
                    logger.warning(f"[downloader] ‚ö†Ô∏è HTTP {response.status} –¥–ª—è {name}")
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                content_length = response.headers.get('content-length')
                if content_length and int(content_length) > MAX_FILE_SIZE:
                    logger.warning(f"[downloader] ‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {name} ({content_length} –±–∞–π—Ç)")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                safe_filename = self._create_safe_filename(reg_number, name)
                file_path = self.download_dir / safe_filename
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                content = await response.read()
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
                if len(content) > MAX_FILE_SIZE:
                    logger.warning(f"[downloader] ‚ö†Ô∏è –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {name}")
                    return None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                async with aiofiles.open(file_path, 'wb') as f:
                    await f.write(content)
                
                logger.info(f"[downloader] ‚úÖ –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {safe_filename}")
                
                return {
                    "original_name": name,
                    "saved_name": safe_filename,
                    "path": str(file_path),
                    "size": len(content),
                    "uid": uid
                }
                
        except aiohttp.ClientError as e:
            logger.error(f"[downloader] üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {name}: {e}")
        except Exception as e:
            logger.error(f"[downloader] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {name}: {e}")
        
        return None
    
    def _is_supported_extension(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        return any(filename.lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)
    
    def _create_safe_filename(self, reg_number: str, original_name: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
        import re
        from datetime import datetime
        
        # –£–±–∏—Ä–∞–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        safe_name = re.sub(r'[^\w\-_.]', '_', original_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        return f"{reg_number}_{timestamp}_{safe_name}"
    
    def get_downloaded_files(self, reg_number: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞"""
        files = []
        for file_path in self.download_dir.glob(f"{reg_number}_*"):
            if file_path.is_file():
                files.append({
                    "name": file_path.name,
                    "path": str(file_path),
                    "size": file_path.stat().st_size
                })
        return files
    
    def cleanup_old_files(self, max_age_hours: int = 24) -> int:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞"""
        import time
        from datetime import datetime, timedelta
        
        cutoff_time = datetime.now() - timedelta(hours=max_age_hours)
        deleted_count = 0
        
        for file_path in self.download_dir.iterdir():
            if file_path.is_file():
                file_time = datetime.fromtimestamp(file_path.stat().st_mtime)
                if file_time < cutoff_time:
                    try:
                        file_path.unlink()
                        deleted_count += 1
                        logger.info(f"[downloader] üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path.name}")
                    except Exception as e:
                        logger.error(f"[downloader] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path.name}: {e}")
        
        return deleted_count

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
downloader = DocumentDownloader()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
async def download_documents(tender_data: Dict, reg_number: str) -> Dict:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    return await downloader.download_documents(tender_data, reg_number)

def download_documents_sync(tender_data: Dict, reg_number: str) -> Dict:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    import asyncio
    return asyncio.run(downloader.download_documents(tender_data, reg_number))
