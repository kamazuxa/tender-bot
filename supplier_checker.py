"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –§–ù–°, –§–°–°–ü, –ê—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ –°–∫–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import logging
from typing import Dict, Optional
from damia_api import damia_supplier_api

logger = logging.getLogger(__name__)

def calculate_risk_level(fns_data: Dict, fssp_data: Dict, arbitr_data: list, score_data: Dict) -> str:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    """
    risk_score = 0
    
    # –§–ù–° –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if fns_data.get("has_violations"):
        risk_score += 30
    risk_score += fns_data.get("violations_count", 0) * 5
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –§–ù–°
    if fns_data.get("mass_director"):
        risk_score += 25
    if fns_data.get("mass_founder"):
        risk_score += 25
    if fns_data.get("liquidation"):
        risk_score += 40
    if fns_data.get("reorganization"):
        risk_score += 15
    if fns_data.get("unreliable_data"):
        risk_score += 35
    
    # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã –§–ù–°
    negative_registers = fns_data.get("negative_registers", [])
    risk_score += len(negative_registers) * 20
    
    # –§–°–°–ü –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ - –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    if fssp_data.get("has_debts"):
        risk_score += 25
    risk_score += fssp_data.get("debts_count", 0) * 3
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –§–°–°–ü
    active_cases = fssp_data.get("active_cases", 0)
    if active_cases > 0:
        risk_score += active_cases * 5  # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞ - –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–π —Ä–∏—Å–∫
    
    total_debt_amount = fssp_data.get("total_debt_amount", 0)
    if total_debt_amount > 1000000:  # –ë–æ–ª–µ–µ 1 –º–ª–Ω —Ä—É–±–ª–µ–π
        risk_score += 20
    elif total_debt_amount > 100000:  # –ë–æ–ª–µ–µ 100 —Ç—ã—Å —Ä—É–±–ª–µ–π
        risk_score += 10
    
    # –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞ - –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    arbitr_count = len(arbitr_data) if arbitr_data else 0
    risk_score += arbitr_count * 8
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª
    if arbitr_data:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª–∞ –≥–¥–µ –∫–æ–º–ø–∞–Ω–∏—è –±—ã–ª–∞ –æ—Ç–≤–µ—Ç—á–∏–∫–æ–º
        defendant_cases = 0
        plaintiff_cases = 0
        
        for case in arbitr_data:
            if isinstance(case, dict):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –≤ –¥–µ–ª–µ
                role = case.get('role', '').lower()
                if '–æ—Ç–≤–µ—Ç—á–∏–∫' in role or '–¥–æ–ª–∂–Ω–∏–∫' in role:
                    defendant_cases += 1
                elif '–∏—Å—Ç–µ—Ü' in role or '–∫—Ä–µ–¥–∏—Ç–æ—Ä' in role:
                    plaintiff_cases += 1
        
        # –î–µ–ª–∞ –≥–¥–µ –∫–æ–º–ø–∞–Ω–∏—è –±—ã–ª–∞ –æ—Ç–≤–µ—Ç—á–∏–∫–æ–º - –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–π —Ä–∏—Å–∫
        risk_score += defendant_cases * 12
        risk_score += plaintiff_cases * 4
    
    # –°–∫–æ—Ä–∏–Ω–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ - –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    if score_data.get("score") is not None:
        score_value = score_data.get("score", 0)
        if score_value < 400:
            risk_score += 30  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
        elif score_value < 600:
            risk_score += 20  # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        elif score_value < 800:
            risk_score += 10  # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (800+) –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª–æ–≤
    else:
        risk_score += 5  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥ - –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∏—Å–∫
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    if risk_score >= 80:
        return "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
    elif risk_score >= 50:
        return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
    elif risk_score >= 20:
        return "üü° –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
    else:
        return " –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫"

async def check_supplier(inn: str) -> Dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    Args:
        inn: –ò–ù–ù –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    logger.info(f"[checker] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –ò–ù–ù: {inn}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        fns_data = await damia_supplier_api.get_fns(inn)
        fssp_data = await damia_supplier_api.get_fssp(inn)
        arbitr_data = await damia_supplier_api.get_arbitr(inn)
        score_data = await damia_supplier_api.get_scoring(inn)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if isinstance(fns_data, Exception):
            logger.error(f"[checker] –û—à–∏–±–∫–∞ –§–ù–° –¥–ª—è –ò–ù–ù {inn}: {fns_data}")
            fns_data = {"has_violations": False, "violations_count": 0, "status": "error"}
        
        if isinstance(fssp_data, Exception):
            logger.error(f"[checker] –û—à–∏–±–∫–∞ –§–°–°–ü –¥–ª—è –ò–ù–ù {inn}: {fssp_data}")
            fssp_data = {"has_debts": False, "debts_count": 0, "status": "error"}
        
        if isinstance(arbitr_data, Exception):
            logger.error(f"[checker] –û—à–∏–±–∫–∞ –ê—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –ò–ù–ù {inn}: {arbitr_data}")
            arbitr_data = []
        
        if isinstance(score_data, Exception):
            logger.error(f"[checker] –û—à–∏–±–∫–∞ –°–∫–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ò–ù–ù {inn}: {score_data}")
            score_data = {"score": 0, "risk_level": "error"}
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∏—Å–∫
        risk_level = calculate_risk_level(fns_data, fssp_data, arbitr_data, score_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "inn": inn,
            "risk": risk_level,
            "fns": fns_data,
            "fssp": fssp_data,
            "arbitr_count": len(arbitr_data) if arbitr_data else 0,
            "arbitr_cases": arbitr_data[:5] if arbitr_data else [],  # –ü–µ—Ä–≤—ã–µ 5 –¥–µ–ª
            "score": score_data.get("score", 0),
            "score_level": score_data.get("risk_level", "unknown"),
            "check_date": None,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏
            "summary": {
                "violations": fns_data.get("violations_count", 0),
                "debts": fssp_data.get("debts_count", 0),
                "arbitrage": len(arbitr_data) if arbitr_data else 0,
                "reliability_score": score_data.get("score", 0)
            }
        }
        
        logger.info(f"[checker] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ò–ù–ù {inn}: {risk_level}")
        return result
        
    except Exception as e:
        logger.error(f"[checker] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù {inn}: {e}")
        return {
            "inn": inn,
            "risk": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "fns": {"status": "error"},
            "fssp": {"status": "error"},
            "arbitr_count": 0,
            "arbitr_cases": [],
            "score": 0,
            "score_level": "error",
            "check_date": None,
            "summary": {
                "violations": 0,
                "debts": 0,
                "arbitrage": 0,
                "reliability_score": 0
            }
        }

def format_supplier_check_result(check_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not check_data or check_data.get("risk") == "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏":
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    summary = check_data.get("summary", {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    parts = [
        f"üîç {check_data.get('risk', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        f"üß∑ –ê—Ä–±–∏—Ç—Ä–∞–∂–∏: {summary.get('arbitrage', 0)}",
        f"üí∞ –§–°–°–ü: {summary.get('debts', 0)}",
        f"üìä –°–∫–æ—Ä–∏–Ω–≥: {summary.get('reliability_score', 0)}"
    ]
    
    return " | ".join(parts)

def get_detailed_check_info(check_data: Dict) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    """
    if not check_data or check_data.get("risk") == "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏":
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    fns = check_data.get("fns", {})
    fssp = check_data.get("fssp", {})
    summary = check_data.get("summary", {})
    arbitr_cases = check_data.get("arbitr_cases", [])
    
    details = [
        f"üîç **–û–±—â–∏–π —Ä–∏—Å–∫:** {check_data.get('risk', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        f"",
        f"üìä **–§–ù–°:**",
        f"‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏—è: {summary.get('violations', 0)}",
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {fns.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –§–ù–°
    if fns.get("mass_director"):
        details.append("‚Ä¢ ‚ö†Ô∏è –ú–∞—Å—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä")
    if fns.get("mass_founder"):
        details.append("‚Ä¢ ‚ö†Ô∏è –ú–∞—Å—Å–æ–≤—ã–π —É—á—Ä–µ–¥–∏—Ç–µ–ª—å")
    if fns.get("liquidation"):
        details.append("‚Ä¢ üî¥ –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è")
    if fns.get("reorganization"):
        details.append("‚Ä¢ üü° –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
    if fns.get("unreliable_data"):
        details.append("‚Ä¢ üî¥ –ù–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã
    negative_registers = fns.get("negative_registers", [])
    if negative_registers:
        details.append(f"‚Ä¢ üî¥ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã: {len(negative_registers)}")
    
    details.extend([
        f"",
        f"üìä **–°–∫–æ—Ä–∏–Ω–≥:**",
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: {check_data.get('score_data', {}).get('model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {check_data.get('score', 0)}",
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {check_data.get('score_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        f"",
        f"üí∞ **–§–°–°–ü:**",
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤: {summary.get('debts', 0)}",
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {fssp.get('active_cases', 0)}",
        f"‚Ä¢ –°—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {fssp.get('total_debt_amount', 0):,.0f} ‚ÇΩ" if fssp.get('total_debt_amount') else "‚Ä¢ –°—É–º–º–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞",
        f"",
        f"‚öñÔ∏è **–ê—Ä–±–∏—Ç—Ä–∞–∂:**",
        f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–ª: {summary.get('arbitrage', 0)}",
    ])
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö
    if arbitr_cases:
        defendant_cases = 0
        plaintiff_cases = 0
        
        for case in arbitr_cases[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–µ–ª
            if isinstance(case, dict):
                role = case.get('role', '').lower()
                if '–æ—Ç–≤–µ—Ç—á–∏–∫' in role or '–¥–æ–ª–∂–Ω–∏–∫' in role:
                    defendant_cases += 1
                elif '–∏—Å—Ç–µ—Ü' in role or '–∫—Ä–µ–¥–∏—Ç–æ—Ä' in role:
                    plaintiff_cases += 1
        
        if defendant_cases > 0:
            details.append(f"‚Ä¢ üî¥ –û—Ç–≤–µ—Ç—á–∏–∫: {defendant_cases} –¥–µ–ª")
        if plaintiff_cases > 0:
            details.append(f"‚Ä¢ üü° –ò—Å—Ç–µ—Ü: {plaintiff_cases} –¥–µ–ª")
    
    return "\n".join(details) 