# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫—É–ø–æ–∫
from tenderguru_api import TenderGuruAPI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from keyboards import history_keyboard, back_keyboard, main_menu_keyboard
from config import TENDERGURU_API_CODE
from navigation_utils import handle_navigation_buttons
from utils.validators import extract_tender_info_from_url
from handlers.analyze_handlers import analyze_tender_handler
import logging

# TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫—É–ø–æ–∫, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å FSM –∏ UX 

logger = logging.getLogger(__name__)

async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        return
    text = getattr(message, 'text', None)
    if not text:
        await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ò–ù–ù.", reply_markup=back_keyboard)
        return
    text = text.strip()
    api = TenderGuruAPI(TENDERGURU_API_CODE)
    logger.info(f"[history_handler] –ü–æ–ª—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: {text}")
    await message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—É–ø–æ–∫...")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if handle_navigation_buttons(update, context.user_data, main_menu_keyboard):
        logger.info("[history_handler] –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –≤—ã—Ö–æ–¥")
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —ç—Ç–æ ‚Äî –ò–ù–ù –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if text.isdigit() and len(text) in [10, 12]:
        # –ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù (–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è)
        result = api.get_winners_by_inn(text)
        logger.info(f"[history_handler] API get_winners_by_inn({text}) –≤–µ—Ä–Ω—É–ª: {result}")
        contracts = result.get('results', [])
        if not contracts:
            await message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ –ò–ù–ù.", reply_markup=back_keyboard)
            return
        summary = f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –ò–ù–ù {text} (–ø–µ—Ä–≤—ã–µ 5):\n"
        for c in contracts[:5]:
            summary += f"‚Äî {c.get('ContractName', c.get('name', ''))} | {c.get('Price', c.get('price', ''))} —Ä—É–±. | {c.get('Date', c.get('date', ''))}\n"
        await message.reply_text(summary, parse_mode="Markdown", reply_markup=main_menu_keyboard)
    else:
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (—Ç–µ–Ω–¥–µ—Ä—ã)
        result = api.get_tenders_by_keywords(text)
        logger.info(f"[history_handler] API get_tenders_by_keywords({text}) –≤–µ—Ä–Ω—É–ª: {result}")
        tenders = result.get('results', [])
        if not tenders:
            await message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.", reply_markup=back_keyboard)
            return
        for t in tenders[:5]:
            reg_number = t.get('regNumber') or t.get('number') or t.get('id') or ''
            platform_code = t.get('ETP') or t.get('platform') or ''
            name = t.get('name', t.get('ContractName', ''))
            price = t.get('price', t.get('Price', ''))
            date = t.get('date', t.get('Date', ''))
            msg = f"‚Äî {name} | {price} —Ä—É–±. | {date}"
            logger.info(f"[history_handler] tender: reg_number={reg_number}, platform_code={platform_code}, name={name}")
            if reg_number:
                callback_data = f"analyze_found_tender:{reg_number}:{platform_code}"
                logger.info(f"[history_handler] –ö–Ω–æ–ø–∫–∞ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: callback_data={callback_data}")
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data=callback_data)]
                ])
            else:
                keyboard = None
            await message.reply_text(msg, parse_mode="Markdown", reply_markup=keyboard)

async def analyze_found_tender_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data:
        return
    logger.info(f"[analyze_found_tender_callback] –ü–æ–ª—É—á–µ–Ω callback: {query.data}")
    # callback_data: analyze_found_tender:<reg_number>:<platform_code>
    parts = query.data.split(":", 2)
    if len(parts) < 3 or not parts[1]:
        await query.answer()
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞.")
        logger.warning(f"[analyze_found_tender_callback] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {query.data}")
        return
    reg_number = parts[1]
    platform_code = parts[2] if len(parts) > 2 and parts[2] else None
    context.user_data['last_tender_number'] = reg_number
    context.user_data['last_platform_code'] = platform_code
    logger.info(f"[analyze_found_tender_callback] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.user_data: reg_number={reg_number}, platform_code={platform_code}")
    await query.answer()
    await analyze_tender_handler(update, context, bot_instance=None)

# –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:
# application.add_handler(CallbackQueryHandler(analyze_found_tender_callback, pattern=r"^analyze_found_tender:")) 