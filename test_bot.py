#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π TenderBot
"""

import asyncio
import logging
from pathlib import Path
import os
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        import config
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_damia_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç DaMIA"""
    print("üåê –¢–µ—Å—Ç DaMIA –∫–ª–∏–µ–Ω—Ç–∞...")
    try:
        from damia import damia_client
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        test_text = "–¢–µ–Ω–¥–µ—Ä 0123456789012345678 –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤"
        reg_number = damia_client.extract_tender_number(test_text)
        
        if reg_number == "0123456789012345678":
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–Ω–¥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: {reg_number}")
            return False
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏
        test_url = "https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber=0123456789012345678"
        reg_number = damia_client.extract_tender_number(test_url)
        
        if reg_number == "0123456789012345678":
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏: {reg_number}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DaMIA –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

async def test_downloader():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    print("üì• –¢–µ—Å—Ç –º–æ–¥—É–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
    try:
        from downloader import downloader
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if downloader.download_dir.exists():
            print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_name = downloader._create_safe_filename("0123456789012345678", "test_document.pdf")
        if "0123456789012345678" in safe_name and "test_document.pdf" in safe_name:
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {safe_name}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return False

async def test_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞"""
    print("ü§ñ –¢–µ—Å—Ç –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    try:
        from analyzer import analyzer
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        empty_analysis = analyzer._create_empty_analysis()
        if "overall_analysis" in empty_analysis:
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            return False
        
        # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        from analyzer import get_cache_key, cache_analysis_result, get_cached_analysis
        test_data = {"test": "data"}
        test_files = [{"path": "test.txt"}]
        cache_key = get_cache_key(test_data, test_files)
        if cache_key:
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫—ç—à–∞")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

async def test_utils():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç—ã"""
    print("üîß –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç...")
    try:
        from utils import validate_user_session, format_file_size, sanitize_filename
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
        user_sessions = {123: {"status": "ready_for_analysis", "data": "test"}}
        valid, session = validate_user_session(123, user_sessions, "ready_for_analysis")
        if valid and session:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏")
            return False
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        size_str = format_file_size(1024)
        if "1.0KB" in size_str:
            print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {size_str}")
            return False
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_name = sanitize_filename("test file (1).pdf")
        if "test_file_1_.pdf" in safe_name:
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {safe_name}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç: {e}")
        return False

async def test_api_connections():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    print("üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ API...")
    
    try:
        import config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        if config.TELEGRAM_TOKEN and config.TELEGRAM_TOKEN != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_—Ç–æ–∫–µ–Ω':
            print("‚úÖ Telegram —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if config.DAMIA_API_KEY and config.DAMIA_API_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_API_–∫–ª—é—á':
            print("‚úÖ DaMIA API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è DaMIA API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if config.DAMIA_ARBITR_API_KEY and config.DAMIA_ARBITR_API_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_–∫–ª—é—á_–¥–ª—è_–∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π':
            print("‚úÖ DaMIA API –∫–ª—é—á –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è DaMIA API –∫–ª—é—á –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if config.DAMIA_FNS_API_KEY and config.DAMIA_FNS_API_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_–∫–ª—é—á_–¥–ª—è_–§–ù–°':
            print("‚úÖ DaMIA API –∫–ª—é—á –¥–ª—è –§–ù–° –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è DaMIA API –∫–ª—é—á –¥–ª—è –§–ù–° –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if config.OPENAI_API_KEY and config.OPENAI_API_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_OpenAI_–∫–ª—é—á':
            print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if config.SERPAPI_KEY and config.SERPAPI_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_SerpAPI_–∫–ª—é—á':
            print("‚úÖ SerpAPI –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è SerpAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: {e}")
        return False

async def test_file_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        "bot.py",
        "config.py", 
        "damia.py",
        "damia_api.py",
        "fns_api.py",
        "arbitr_api.py",
        "supplier_checker.py",
        "tender_history.py",
        "downloader.py",
        "analyzer.py",
        "utils.py",
        "handlers.py",
        "requirements.txt",
        "README.md",
        "env_example.txt",
        ".gitignore"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

async def test_supplier_checker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    print("üîç –¢–µ—Å—Ç –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")
    try:
        from supplier_checker import check_supplier, format_supplier_check_result
        from arbitr_api import arbitr_api
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        import config
        if config.DAMIA_ARBITR_API_KEY and config.DAMIA_ARBITR_API_KEY != '–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_–∫–ª—é—á_–¥–ª—è_–∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π':
            print("‚úÖ API –∫–ª—é—á –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ API
        if arbitr_api:
            print("‚úÖ API –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π")
            return False
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        test_data = {
            "risk": "üü° –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫",
            "summary": {
                "arbitrage": 2,
                "debts": 1,
                "reliability_score": 750
            }
        }
        formatted = format_supplier_check_result(test_data)
        if "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫" in formatted:
            print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {formatted}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")
        return False

async def test_tender_history():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤"""
    print("üìà –¢–µ—Å—Ç –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤...")
    try:
        from tender_history import TenderHistoryAnalyzer, TenderPosition, HistoricalTender
        from damia import damia_client
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = TenderHistoryAnalyzer(damia_client)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞
        test_tender_data = {
            "–†–µ–≥–ù–æ–º–µ—Ä": "123456789",
            "–ü—Ä–µ–¥–º–µ—Ç": "–ü–æ—Å—Ç–∞–≤–∫–∞ –º—É–∫–∏ –ø—à–µ–Ω–∏—á–Ω–æ–π –≤—ã—Å—à–µ–≥–æ —Å–æ—Ä—Ç–∞",
            "–ù–ú–¶–ö": 1000000,
            "–†–µ–≥–∏–æ–Ω": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "–î–∞—Ç–∞–ü—É–±–ª": "2024-01-15",
            "–ü–æ–∑–∏—Ü–∏–∏": [
                {
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": "–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç –ì–û–°–¢ –† 52189-2003",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1000,
                    "–ï–¥–∏–Ω–∏—Ü–∞": "–∫–≥",
                    "–¶–µ–Ω–∞": 100
                }
            ]
        }
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        positions = await analyzer.extract_tender_positions(test_tender_data)
        if len(positions) > 0:
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ç–µ–Ω–¥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π")
            return False
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        queries = await analyzer.generate_search_queries(positions)
        if len(queries) > 0:
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
            return False
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        test_historical_tenders = [
            HistoricalTender(
                tender_id="111111111",
                name="–ü–æ—Å—Ç–∞–≤–∫–∞ –º—É–∫–∏ –ø—à–µ–Ω–∏—á–Ω–æ–π",
                region="–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
                publication_date=datetime(2023, 12, 15),
                nmck=950000,
                final_price=850000,
                winner_name="–û–û–û '–ú—É–∫–∞–ü–ª—é—Å'",
                winner_inn="1234567890",
                participants_count=4,
                subject="–ü–æ—Å—Ç–∞–≤–∫–∞ –º—É–∫–∏ –ø—à–µ–Ω–∏—á–Ω–æ–π –≤—ã—Å—à–µ–≥–æ —Å–æ—Ä—Ç–∞",
                status="completed",
                price_reduction_percent=10.5
            )
        ]
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω
        price_analysis = await analyzer.analyze_price_dynamics(test_historical_tenders, test_tender_data['–ù–ú–¶–ö'])
        if price_analysis and 'avg_price' in price_analysis:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        report = await analyzer.generate_analysis_report(test_historical_tenders, test_tender_data, price_analysis)
        if "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤" in report:
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {e}")
        return False

async def test_full_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîÑ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞...")
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        # –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞ –¥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
        return False

async def test_retry_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç retry-–ª–æ–≥–∏–∫—É"""
    print("üîÑ –¢–µ—Å—Ç retry-–ª–æ–≥–∏–∫–∏...")
    try:
        from bot import retry_on_error
        
        @retry_on_error(max_retries=2, delay=0.1)
        async def failing_function():
            raise Exception("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
        
        try:
            await failing_function()
            print("‚ùå Retry-–ª–æ–≥–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")
            return False
        except Exception:
            print("‚úÖ Retry-–ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è retry-–ª–æ–≥–∏–∫–∏: {e}")
        return False

async def test_caching():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üíæ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        from bot import get_cache_key, cache_analysis_result, get_cached_analysis
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {"test": "data"}
        test_files = [{"path": "test.txt"}]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
        cache_key = get_cache_key(test_data, test_files)
        if not cache_key:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫—ç—à–∞")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        test_result = {"analysis": "test result"}
        cache_analysis_result(cache_key, test_result)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
        cached_result = get_cached_analysis(cache_key)
        if cached_result == test_result:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def test_admin_panel():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    print("üë®‚Äçüíº –¢–µ—Å—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...")
    try:
        from bot import TenderBot
        
        bot = TenderBot()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await bot._get_user_info(12345)
        if isinstance(user_info, dict) and 'has_subscription' in user_info:
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return False
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockUser:
            def __init__(self, username):
                self.username = username
        
        class MockQuery:
            def __init__(self, username):
                self.from_user = MockUser(username)
        
        # –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è hoproqr (–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø)
        query_hoproqr = MockQuery("hoproqr")
        # –¢–µ—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø)
        query_regular = MockQuery("regular_user")
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
        return False

async def test_supplier_check_apis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç API –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...")
    try:
        # –¢–µ—Å—Ç FNS API
        from fns_api import fns_api
        print("‚úÖ FNS API –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç Arbitr API
        from arbitr_api import arbitr_api
        print("‚úÖ Arbitr API –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç Scoring API
        from scoring_api import scoring_api
        print("‚úÖ Scoring API –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç FSSP API
        from fssp_api import fssp_client
        print("‚úÖ FSSP API –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ò–ù–ù
        test_inns = ["7704627217", "1234567890", "123456789012"]
        for inn in test_inns:
            if len(inn) in [10, 12] and inn.isdigit():
                print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù {inn} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ò–ù–ù {inn}")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TenderBot")
    print("=" * 60)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("DaMIA –∫–ª–∏–µ–Ω—Ç", test_damia_client),
        ("–ú–æ–¥—É–ª—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", test_downloader),
        ("–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞", test_analyzer),
        ("–£—Ç–∏–ª–∏—Ç—ã", test_utils),
        ("API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", test_api_connections),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", test_supplier_checker),
        ("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ–Ω–¥–µ—Ä–æ–≤", test_tender_history),
        ("Retry-–ª–æ–≥–∏–∫–∞", test_retry_logic),
        ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", test_caching),
        ("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª", test_full_analysis),
        ("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", test_admin_panel),
        ("API –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤", test_supplier_check_apis)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}...")
        try:
            result = await test_func()
            results.append((test_name, result))
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{status}: {test_name}")
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {test_name} - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = asyncio.run(run_all_tests())
    exit(0 if success else 1) 