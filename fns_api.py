"""
DaMIA API –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –§–ù–° (–ï–ì–†–Æ–õ/–ï–ì–†–ò–ü)
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ API-–§–ù–°
"""

import httpx
import asyncio
import logging
from typing import Dict, List, Optional
from config import DAMIA_FNS_API_KEY, DAMIA_FNS_BASE_URL

logger = logging.getLogger(__name__)

class DamiaFNSAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DaMIA API –¥–ª—è –§–ù–°"""
    
    def __init__(self):
        self.api_key = DAMIA_FNS_API_KEY
        self.base_url = DAMIA_FNS_BASE_URL
        self.timeout = 30.0
        self.max_retries = 3
        self.retry_delay = 1.0
    
    async def _make_request(self, endpoint: str, params: Optional[Dict] = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        headers = {
            "User-Agent": "TenderBot/1.0",
            "Accept": "application/json",
            "Content-Type": "application/json"
        }
        
        for attempt in range(self.max_retries):
            try:
                async with httpx.AsyncClient(timeout=self.timeout) as client:
                    url = f"{self.base_url}/{endpoint}"
                    response = await client.get(url, headers=headers, params=params)
                    
                    if response.status_code == 200:
                        return response.json()
                    elif response.status_code == 404:
                        logger.warning(f"[fns] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {endpoint}: {params}")
                        return None
                    else:
                        logger.error(f"[fns] –û—à–∏–±–∫–∞ API {endpoint}: {response.status_code} - {response.text}")
                        
            except httpx.TimeoutException:
                logger.warning(f"[fns] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            except Exception as e:
                logger.error(f"[fns] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint}: {e}")
            
            if attempt < self.max_retries - 1:
                await asyncio.sleep(self.retry_delay * (attempt + 1))
        
        return None
    
    async def search_companies(self, query: str, limit: int = 10) -> Dict:
        """
        –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
        –ú–µ—Ç–æ–¥: search
        """
        logger.info(f"[fns] –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π: {query}")
        
        params = {
            'q': query,
            'key': self.api_key
        }
        
        if limit:
            params['limit'] = str(limit)
        
        result = await self._make_request('search', params)
        
        if result:
            return {
                "query": query,
                "companies": result.get('items', []),
                "total_count": result.get('count', 0),
                "status": "found"
            }
        
        return {
            "query": query,
            "companies": [],
            "total_count": 0,
            "status": "not_found"
        }
    
    async def get_company_info(self, inn: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ï–ì–†–Æ–õ/–ï–ì–†–ò–ü
        –ú–µ—Ç–æ–¥: egr
        """
        logger.info(f"[fns] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: {inn}")
        
        params = {
            'req': inn,
            'key': self.api_key
        }
        
        result = await self._make_request('egr', params)
        
        if result:
            return {
                "inn": inn,
                "data": result,
                "status": "found"
            }
        
        return {
            "inn": inn,
            "data": None,
            "status": "not_found"
        }
    
    async def check_company(self, inn: str) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (–ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç–∏)
        –ú–µ—Ç–æ–¥: check
        """
        logger.info(f"[fns] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞: {inn}")
        
        params = {
            'req': inn,
            'key': self.api_key
        }
        
        result = await self._make_request('check', params)
        
        if result:
            return {
                "inn": inn,
                "has_violations": result.get("has_violations", False),
                "violations_count": result.get("violations_count", 0),
                "last_check_date": result.get("last_check_date"),
                "status": result.get("status", "unknown"),
                "negative_registers": result.get("negative_registers", []),
                "mass_director": result.get("mass_director", False),
                "mass_founder": result.get("mass_founder", False),
                "liquidation": result.get("liquidation", False),
                "reorganization": result.get("reorganization", False),
                "unreliable_data": result.get("unreliable_data", False),
                "raw_data": result
            }
        
        return {
            "inn": inn,
            "has_violations": False,
            "violations_count": 0,
            "last_check_date": None,
            "status": "not_found",
            "negative_registers": [],
            "mass_director": False,
            "mass_founder": False,
            "liquidation": False,
            "reorganization": False,
            "unreliable_data": False,
            "raw_data": None
        }
    
    async def get_company_changes(self, inn: str, from_date: str) -> Dict:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
        –ú–µ—Ç–æ–¥: changes
        """
        logger.info(f"[fns] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {inn} —Å {from_date}")
        
        params = {
            'req': inn,
            'from_date': from_date,
            'key': self.api_key
        }
        
        result = await self._make_request('changes', params)
        
        if result:
            return {
                "inn": inn,
                "from_date": from_date,
                "changes": result.get('changes', []),
                "status": "found"
            }
        
        return {
            "inn": inn,
            "from_date": from_date,
            "changes": [],
            "status": "not_found"
        }
    
    async def get_inn_by_passport(self, passport_series: str, passport_number: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ò–ù–ù —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        –ú–µ—Ç–æ–¥: innfl
        """
        logger.info(f"[fns] –ü–æ–∏—Å–∫ –ò–ù–ù –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É: {passport_series} {passport_number}")
        
        params = {
            'series': passport_series,
            'number': passport_number,
            'key': self.api_key
        }
        
        result = await self._make_request('innfl', params)
        
        if result:
            return {
                "passport": f"{passport_series} {passport_number}",
                "inn": result.get('inn'),
                "status": "found"
            }
        
        return {
            "passport": f"{passport_series} {passport_number}",
            "inn": None,
            "status": "not_found"
        }
    
    async def check_passport_validity(self, passport_series: str, passport_number: str) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        –ú–µ—Ç–æ–¥: mvdpass
        """
        logger.info(f"[fns] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞: {passport_series} {passport_number}")
        
        params = {
            'series': passport_series,
            'number': passport_number,
            'key': self.api_key
        }
        
        result = await self._make_request('mvdpass', params)
        
        if result:
            return {
                "passport": f"{passport_series} {passport_number}",
                "is_valid": result.get('is_valid', True),
                "status": "found"
            }
        
        return {
            "passport": f"{passport_series} {passport_number}",
            "is_valid": True,
            "status": "not_found"
        }
    
    def format_company_summary(self, company_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not company_data or company_data.get('status') != 'found':
            return "–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        data = company_data.get('data', {})
        
        summary = f"üè¢ {data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        summary += f"–ò–ù–ù: {data.get('inn', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        summary += f"–û–ì–†–ù: {data.get('ogrn', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        summary += f"–°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        summary += f"–ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        summary += f"–î–∏—Ä–µ–∫—Ç–æ—Ä: {data.get('director', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        summary += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data.get('registration_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        return summary

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
fns_api = DamiaFNSAPI() 