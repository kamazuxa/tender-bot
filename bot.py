import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler,
    CallbackQueryHandler, filters
)
from config import TELEGRAM_TOKEN, LOG_LEVEL, LOG_FILE
from damia import damia_client, extract_tender_number
from downloader import downloader
from analyzer import analyzer
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TenderBot:
    def __init__(self):
        self.app = None
        self.user_sessions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TenderBot!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã –≤ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö.

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ (19 —Ü–∏—Ñ—Ä)
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä —Å —Å–∞–π—Ç–∞ –≥–æ—Å–∑–∞–∫—É–ø–æ–∫
3. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á—É –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã

**–ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/cleanup - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã:**
```
0123456789012345678
https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber=0123456789012345678
```

–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
            [InlineKeyboardButton("üîß –°—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown', reply_markup=reply_markup)
        logger.info(f"[bot] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é TenderBot**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–Ω–¥–µ—Ä–∞—Ö
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç–µ–Ω–¥–µ—Ä–∞ (—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ, —É—Å–ª–æ–≤–∏—è –∏ —Ç.–¥.)
‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI GPT
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ 19-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞
‚Ä¢ 20-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞  
‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ zakupki.gov.ru

**–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:**
‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–Ω–¥–µ—Ä–∞
‚Ä¢ –¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É–ø–∞–∫–æ–≤–∫–µ –∏ –∫–∞—á–µ—Å—Ç–≤—É
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—á–∞—Å—Ç–∏—é
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX, XLS, XLSX, TXT
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_text = f"""
üîß **–°—Ç–∞—Ç—É—Å TenderBot**

**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–í–µ—Ä—Å–∏—è:** 2.0.0
**–°—Ç–∞—Ç—É—Å:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

**API —Å—Ç–∞—Ç—É—Å:**
‚Ä¢ DaMIA API: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ OpenAI API: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {len(self.user_sessions)}
‚Ä¢ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(list(downloader.download_dir.glob('*')))}

**–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ
‚Ä¢ VPN –¥–ª—è OpenAI: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è
        """
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def cleanup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cleanup"""
        try:
            deleted_count = downloader.cleanup_old_files()
            await update.message.reply_text(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
        except Exception as e:
            logger.error(f"[bot] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message = update.message.text.strip()
        
        logger.info(f"[bot] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {message[:50]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞
            reg_number = extract_tender_number(message)
            
            if not reg_number:
                await update.message.reply_text(
                    "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫—É–ø–∫–∏ (19-20 —Ü–∏—Ñ—Ä) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä.\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ 0123456789012345678\n"
                    "‚Ä¢ https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber=0123456789012345678"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_sessions[user.id] = {
                'reg_number': reg_number,
                'timestamp': datetime.now(),
                'status': 'processing'
            }
            
            await update.message.reply_text(f"üîç –ò—â—É —Ç–µ–Ω–¥–µ—Ä {reg_number}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–Ω–¥–µ—Ä–µ
            tender_data = await damia_client.get_tender_info(reg_number)
            logger.info(f"–û—Ç–≤–µ—Ç DaMIA: {tender_data}")
            
            if not tender_data:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–Ω–¥–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º {reg_number}.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ
            formatted_info = damia_client.format_tender_info(tender_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            self.user_sessions[user.id]['tender_data'] = tender_data
            self.user_sessions[user.id]['formatted_info'] = formatted_info
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await self._send_tender_info(update, formatted_info, reg_number)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            await self._send_products_list(update, tender_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            await self._send_documents_list(update, tender_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
            self.user_sessions[user.id]['status'] = 'ready_for_analysis'
            
        except Exception as e:
            logger.error(f"[bot] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def _send_products_list(self, update: Update, tender_data: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Ç–µ–Ω–¥–µ—Ä–∞"""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∫–∞–∫ –∫–ª—é—á, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if len(tender_data) == 1 and isinstance(list(tender_data.values())[0], dict):
            tender_data = list(tender_data.values())[0]
        
        product_info = tender_data.get('–ü—Ä–æ–¥—É–∫—Ç', {})
        objects = product_info.get('–û–±—ä–µ–∫—Ç—ã–ó–∞–∫', [])
        
        if not objects:
            await update.message.reply_text("üì¶ –¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        products_text = "üì¶ **–¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:**\n\n"
        
        total_cost = 0
        for i, obj in enumerate(objects[:6], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 6 –ø–æ–∑–∏—Ü–∏–π (—É–º–µ–Ω—å—à–∏–ª –∏–∑-–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
            name = obj.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            quantity = obj.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 0)
            unit = obj.get('–ï–¥–ò–∑–º', '—à—Ç')
            price = obj.get('–¶–µ–Ω–∞–ï–¥', 0)
            cost = obj.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 0)
            okpd = obj.get('–û–ö–ü–î', '')
            additional_info = obj.get('–î–æ–ø–ò–Ω—Ñ–æ', '')
            
            products_text += f"{i}. **{name}**\n"
            products_text += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} {unit}\n"
            products_text += f"   üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥.: {price} ‚ÇΩ\n"
            products_text += f"   üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚ÇΩ\n"
            if okpd:
                products_text += f"   üè∑Ô∏è –û–ö–ü–î: {okpd}\n"
            if additional_info:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                short_info = additional_info[:100] + "..." if len(additional_info) > 100 else additional_info
                products_text += f"   ‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ: {short_info}\n"
            products_text += "\n"
            
            total_cost += cost
        
        if len(objects) > 6:
            products_text += f"... –∏ –µ—â–µ {len(objects) - 6} –ø–æ–∑–∏—Ü–∏–π\n\n"
        
        products_text += f"**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: {total_cost} ‚ÇΩ**"
        
        await update.message.reply_text(products_text, parse_mode='Markdown')
    
    async def _send_documents_list(self, update: Update, tender_data: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç–µ–Ω–¥–µ—Ä–∞"""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∫–∞–∫ –∫–ª—é—á, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if len(tender_data) == 1 and isinstance(list(tender_data.values())[0], dict):
            tender_data = list(tender_data.values())[0]
        
        documents = tender_data.get('–î–æ–∫—É–º–µ–Ω—Ç—ã', [])
        
        if not documents:
            await update.message.reply_text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs_text = "üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞:**\n\n"
        
        for i, doc in enumerate(documents[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            name = doc.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            date = doc.get('–î–∞—Ç–∞–†–∞–∑–º', '')
            files = doc.get('–§–∞–π–ª—ã', [])
            
            docs_text += f"{i}. **{name}**\n"
            if date:
                docs_text += f"   üìÖ –î–∞—Ç–∞: {date}\n"
            if files:
                docs_text += f"   üìé –§–∞–π–ª–æ–≤: {len(files)}\n"
            docs_text += "\n"
        
        if len(documents) > 10:
            docs_text += f"... –∏ –µ—â–µ {len(documents) - 10} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        
        await update.message.reply_text(docs_text, parse_mode='Markdown')
    
    async def _send_tender_info(self, update: Update, tender_info: dict, reg_number: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        info_text = f"""
üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ**

üî¢ **–ù–æ–º–µ—Ä:** `{reg_number}`
üè¢ **–ó–∞–∫–∞–∑—á–∏–∫:** {tender_info['customer']}
üìù **–ò–ù–ù:** {tender_info['customer_inn']}
üìç **–ê–¥—Ä–µ—Å:** {tender_info['customer_address']}
üìÑ **–ü—Ä–µ–¥–º–µ—Ç:** {tender_info['subject']}
üí∞ **–¶–µ–Ω–∞:** {tender_info['price']}
üìÖ **–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {tender_info['publication_date']}
‚è∞ **–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏:** {tender_info['submission_deadline']}
üìä **–°—Ç–∞—Ç—É—Å:** {tender_info['status']}
üìé **–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {tender_info['document_count']}

üîç **–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:**
‚Ä¢ **–°–ø–æ—Å–æ–± –∑–∞–∫—É–ø–∫–∏:** {tender_info['procurement_type']}
‚Ä¢ **–ú–µ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∫–∏:** {tender_info['delivery_place']}
‚Ä¢ **–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:** {tender_info['guarantee_amount']}
‚Ä¢ **–†–µ–≥–∏–æ–Ω:** {tender_info['region']}
        """
        
        keyboard = [
            [InlineKeyboardButton("üì¶ –¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", callback_data=f"products_{reg_number}")],
            [InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"documents_{reg_number}")],
            [InlineKeyboardButton("üè¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"details_{reg_number}")],
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"analyze_{reg_number}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(info_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _send_analysis_to_chat(self, bot, chat_id: int, analysis_result: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∞—Ç –ø–æ chat_id"""
        overall = analysis_result.get('overall_analysis', {})
        summary = overall.get('summary', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —á–∞—Å—Ç–∏
        if len(summary) > 4000:
            parts = [summary[i:i+4000] for i in range(0, len(summary), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    await bot.send_message(chat_id=chat_id, text=f"ü§ñ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞** (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode='Markdown')
                else:
                    await bot.send_message(chat_id=chat_id, text=f"ü§ñ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞** (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode='Markdown')
        else:
            await bot.send_message(chat_id=chat_id, text=f"ü§ñ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞:**\n\n{summary}", parse_mode='Markdown')
    
    async def _send_analysis(self, update: Update, analysis_result: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        overall = analysis_result.get('overall_analysis', {})
        summary = overall.get('summary', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —á–∞—Å—Ç–∏
        if len(summary) > 4000:
            parts = [summary[i:i+4000] for i in range(0, len(summary), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    await update.message.reply_text(f"ü§ñ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞** (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode='Markdown')
                else:
                    await update.message.reply_text(f"ü§ñ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞** (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"ü§ñ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞:**\n\n{summary}", parse_mode='Markdown')
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "help":
            await self.help_command(update, context)
        elif query.data == "status":
            await self.status_command(update, context)
        elif query.data.startswith("products_"):
            reg_number = query.data.split("_")[1]
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
            if user_id not in self.user_sessions or self.user_sessions[user_id]['status'] != 'ready_for_analysis':
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
            tender_data = self.user_sessions[user_id]['tender_data']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._send_products_list_to_chat(context.bot, query.message.chat_id, tender_data)
            
        elif query.data.startswith("documents_"):
            reg_number = query.data.split("_")[1]
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
            if user_id not in self.user_sessions or self.user_sessions[user_id]['status'] != 'ready_for_analysis':
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
            tender_data = self.user_sessions[user_id]['tender_data']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            await self._send_documents_list_with_download(context.bot, query.message.chat_id, tender_data, reg_number)
            
        elif query.data.startswith("details_"):
            reg_number = query.data.split("_")[1]
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
            if user_id not in self.user_sessions or self.user_sessions[user_id]['status'] != 'ready_for_analysis':
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
            formatted_info = self.user_sessions[user_id]['formatted_info']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await self._send_detailed_info_to_chat(context.bot, query.message.chat_id, formatted_info)
            
        elif query.data.startswith("download_"):
            reg_number = query.data.split("_")[1]
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
            if user_id not in self.user_sessions or self.user_sessions[user_id]['status'] != 'ready_for_analysis':
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
            tender_data = self.user_sessions[user_id]['tender_data']
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏
                await query.edit_message_reply_markup(reply_markup=None)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                await context.bot.send_message(chat_id=query.message.chat_id, text="üì• –°–∫–∞—á–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
                download_result = await downloader.download_documents(tender_data, reg_number)
                
                if download_result['success'] > 0:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=f"‚úÖ –°–∫–∞—á–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {download_result['success']}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {download_result['failed']}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if download_result['files']:
                        await context.bot.send_message(chat_id=query.message.chat_id, text="üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã...")
                        
                        for file_path in download_result['files'][:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ñ–∞–π–ª–∞–º–∏
                            try:
                                with open(file_path, 'rb') as file:
                                    filename = os.path.basename(file_path)
                                    await context.bot.send_document(
                                        chat_id=query.message.chat_id,
                                        document=file,
                                        filename=filename
                                    )
                            except Exception as e:
                                logger.error(f"[bot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                                continue
                        
                        if len(download_result['files']) > 10:
                            await context.bot.send_message(
                                chat_id=query.message.chat_id,
                                text=f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 10 —Ñ–∞–π–ª–æ–≤ –∏–∑ {len(download_result['files'])}. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                            )
                    else:
                        await context.bot.send_message(chat_id=query.message.chat_id, text="‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    await context.bot.send_message(chat_id=query.message.chat_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
                
            except Exception as e:
                logger.error(f"[bot] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç–µ–Ω–¥–µ—Ä–∞ {reg_number}: {e}")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            
        elif query.data.startswith("analyze_"):
            reg_number = query.data.split("_")[1]
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
            if user_id not in self.user_sessions or self.user_sessions[user_id]['status'] != 'ready_for_analysis':
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
            tender_data = self.user_sessions[user_id]['tender_data']
            formatted_info = self.user_sessions[user_id]['formatted_info']
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏
                await query.edit_message_reply_markup(reply_markup=None)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                await context.bot.send_message(chat_id=query.message.chat_id, text="üì• –°–∫–∞—á–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
                download_result = await downloader.download_documents(tender_data, reg_number)
                
                if download_result['success'] > 0:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=f"‚úÖ –°–∫–∞—á–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {download_result['success']}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {download_result['failed']}"
                    )
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    if download_result['files']:
                        await context.bot.send_message(chat_id=query.message.chat_id, text="ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò...")
                        analysis_result = await analyzer.analyze_tender_documents(formatted_info, download_result['files'])
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
                        await self._send_analysis_to_chat(context.bot, query.message.chat_id, analysis_result)
                    else:
                        await context.bot.send_message(chat_id=query.message.chat_id, text="‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                else:
                    await context.bot.send_message(chat_id=query.message.chat_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
                self.user_sessions[user_id]['status'] = 'completed'
                
            except Exception as e:
                logger.error(f"[bot] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞ {reg_number}: {e}")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–Ω–¥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    
    async def _send_products_list_to_chat(self, bot, chat_id: int, tender_data: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —á–∞—Ç"""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∫–∞–∫ –∫–ª—é—á, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if len(tender_data) == 1 and isinstance(list(tender_data.values())[0], dict):
            tender_data = list(tender_data.values())[0]
        
        product_info = tender_data.get('–ü—Ä–æ–¥—É–∫—Ç', {})
        objects = product_info.get('–û–±—ä–µ–∫—Ç—ã–ó–∞–∫', [])
        
        if not objects:
            await bot.send_message(chat_id=chat_id, text="üì¶ –¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        products_text = "üì¶ **–¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:**\n\n"
        
        total_cost = 0
        for i, obj in enumerate(objects[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–∑–∏—Ü–∏–π
            name = obj.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            quantity = obj.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 0)
            unit = obj.get('–ï–¥–ò–∑–º', '—à—Ç')
            price = obj.get('–¶–µ–Ω–∞–ï–¥', 0)
            cost = obj.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 0)
            okpd = obj.get('–û–ö–ü–î', '')
            additional_info = obj.get('–î–æ–ø–ò–Ω—Ñ–æ', '')
            
            products_text += f"{i}. **{name}**\n"
            products_text += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} {unit}\n"
            products_text += f"   üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥.: {price} ‚ÇΩ\n"
            products_text += f"   üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚ÇΩ\n"
            if okpd:
                products_text += f"   üè∑Ô∏è –û–ö–ü–î: {okpd}\n"
            if additional_info:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                short_info = additional_info[:80] + "..." if len(additional_info) > 80 else additional_info
                products_text += f"   ‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ: {short_info}\n"
            products_text += "\n"
            
            total_cost += cost
        
        if len(objects) > 10:
            products_text += f"... –∏ –µ—â–µ {len(objects) - 10} –ø–æ–∑–∏—Ü–∏–π\n\n"
        
        products_text += f"**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: {total_cost} ‚ÇΩ**"
        
        await bot.send_message(chat_id=chat_id, text=products_text, parse_mode='Markdown')
    
    async def _send_documents_list_with_download(self, bot, chat_id: int, tender_data: dict, reg_number: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∫–∞–∫ –∫–ª—é—á, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if len(tender_data) == 1 and isinstance(list(tender_data.values())[0], dict):
            tender_data = list(tender_data.values())[0]
        
        documents = tender_data.get('–î–æ–∫—É–º–µ–Ω—Ç—ã', [])
        
        if not documents:
            await bot.send_message(chat_id=chat_id, text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs_text = "üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞:**\n\n"
        
        for i, doc in enumerate(documents[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            name = doc.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            date = doc.get('–î–∞—Ç–∞–†–∞–∑–º', '')
            files = doc.get('–§–∞–π–ª—ã', [])
            
            docs_text += f"{i}. **{name}**\n"
            if date:
                docs_text += f"   üìÖ –î–∞—Ç–∞: {date}\n"
            if files:
                docs_text += f"   üìé –§–∞–π–ª–æ–≤: {len(files)}\n"
            docs_text += "\n"
        
        if len(documents) > 10:
            docs_text += f"... –∏ –µ—â–µ {len(documents) - 10} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"
        
        docs_text += "üíæ **–°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"download_{reg_number}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await bot.send_message(chat_id=chat_id, text=docs_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _send_detailed_info_to_chat(self, bot, chat_id: int, tender_info: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ"""
        detailed_text = f"""
üè¢ **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ**

üîç **–î–µ—Ç–∞–ª–∏ –∑–∞–∫—É–ø–∫–∏:**
‚Ä¢ **–°–ø–æ—Å–æ–± –∑–∞–∫—É–ø–∫–∏:** {tender_info['procurement_type']}
‚Ä¢ **–ú–µ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∫–∏:** {tender_info['delivery_place']}
‚Ä¢ **–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏:** {tender_info['delivery_terms']}
‚Ä¢ **–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:** {tender_info['guarantee_amount']}
‚Ä¢ **–ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:** {tender_info['funding_source']}

üåç **–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ **–†–µ–≥–∏–æ–Ω:** {tender_info['region']}
‚Ä¢ **–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω:** {tender_info['federal_law']}-–§–ó

üè¢ **–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞:**
‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {tender_info['etp_name']}
‚Ä¢ **–°–∞–π—Ç:** {tender_info['etp_url']}

üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ **–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ:** {tender_info['contact_person']}
‚Ä¢ **–¢–µ–ª–µ—Ñ–æ–Ω:** {tender_info['contact_phone']}
‚Ä¢ **Email:** {tender_info['contact_email']}

üí≥ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏:**
‚Ä¢ **–ò–ö–ó:** {tender_info['ikz']}
‚Ä¢ **–ê–≤–∞–Ω—Å:** {tender_info['advance_percent']}%
‚Ä¢ **–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:** {tender_info['execution_amount']}
‚Ä¢ **–ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ:** {tender_info['bank_support']}
        """
        
        await bot.send_message(chat_id=chat_id, text=detailed_text, parse_mode='Markdown')
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("cleanup", self.cleanup_command))
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def run(self):
        try:
            self.app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
            self.setup_handlers()
            logger.info("üöÄ TenderBot –∑–∞–ø—É—â–µ–Ω")
            print("ü§ñ TenderBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª:", LOG_FILE)
            self.app.run_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    bot = TenderBot()
    bot.run()
